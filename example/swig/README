
This directory is for producing SWIG interfaces to YARP.

This lets you run YARP from Java, Python, Perl, Tcl, Chicken, C#, Matlab.

Note that while we try to preserve YARP as close to its original form
as possible, some classes and methods had to be changed because
of issues with templates and pointers.  So the API is slightly 
different from the original.  The two ways to find out about the API
are:

 + Compile the java or python interfaces, and then run javadoc
   or pydoc to build a browsable form of the API.

 + Read yarp.i.  This is a bit complicated, but powerful because you'll
   learn how to fix things if you run into problems.  See www.swig.org
   for documentation on the syntax of this file.


============================================================================
== JAVA INTERFACE

See also:
  http://eris.liralab.it/wiki/YARP_and_Java
for latest tips.

To create the Java interface to YARP from linux
(the process on windows is analogous using cmake):
  ccmake .   # make sure the Java JNI directories get found
  make
You should end up with a "libjyarp.so" library and a lot of generated "*.java"
files in a directory called "generated_src".
There will be a LOT of warnings during this process.  That is normal.

Now either do something like one of:
  setenv LD_LIBRARY_PATH $PWD:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
Or move libjyarp.so into a directory in your library path.

Now try building the examples using ant by typing:
  ant

You should now have files like "example1.jar" in the bin directory.
The source for these examples is in the "src" directory.

Try running:
  java -jar bin/example1.jar
and see if stuff happens.


============================================================================
== PYTHON, PERL, TCL INTERFACES

Run:
  ccmake .
And set "CREATE_PERL" and/or "CREATE_PYTHON" and/or "CREATE_TCL" to true.
Run:
  make

You should now have libraries called 
+ libyarp.so 
+ and/or _yarp.so 
+ and/or cyarp.so

Now try to run example.pl and/or example.py and/or example.tcl


============================================================================
== CHICKEN INTERFACE

*** at the time of writing, you need to comment out the line mentioning
include "std_vector.i" in yarp.i -- a mapping for the std::vector class
doesn't seem to be implemented yet for Chicken.

Run:
  ccmake .
And set "CREATE_CHICKEN" to true.
Run:
  make

You should now have cyarp.so and cyarp.scm

Now try:
  chicken cyarp.scm
  chicken example.scm && gcc example.c cyarp.c cyarp.so -lchicken -o example
  ./example

============================================================================
== CSHARP INTERFACE

Run:
  ccmake .
And set "CREATE_CSHARP" to true.
Run:
  make

You should now have libcsyarp.so and a whole lot of .cs files

The .cs files are not quite correct, you need to run:
  ./csharp-fix.pl
to fix them up (problems with multiple inheritance mismatch)

Now try:
  mcs -out:example *.cs
or whatever your compiler is.  If it works, then:
  ./example.exe
should do something yarpy.


============================================================================
== MATLAB INTERFACE

Matlab can run java code, so we access YARP via java.  See the 
"Java interface" section above.

See also:
  http://eris.liralab.it/wiki/Calling_yarp_from_Matlab
for latest tips.

