
/*
 * Copyright: (C) 2011 Robotics, Brain and Cognitive Sciences - Italian Institute of Technology (IIT)
 * Copy Policy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
 *
 */

/**
 * @page arbitration_tevent An example of using port arbitrator with time events


\author Ali Paikan

\section desc Description
This example demonstrates how to use port monitor to coordinate different modules by arbitrating their connections in the input port.  Each port monitor can be set with a selection rule (constraint). The rule is simply written in first order logic (boolean expression) based on some symbolic name. We call these symbols as events. Port monitors from peer connections (the connections to the same input port) can set (add) or unset (remove) events in a shared event record. If an event is set, it has a true value in the corresponding boolean expression; otherwise it is false. When data arrives to the port from a connection, the corresponding port monitor evaluate the boolean expression and if it is true (the constraint is satisfied), the data can be delivered to the port; otherwise it is discarded. 

A port monitor can set the selection rule (for its own connection) using `PortMonitor.setConstraint()'. 
For example: 

\verbatim
    PortMonitor.setConstraint("not e_ball")
\endverbatim

Normally events have infinite life time. This means that they remain valid in the container until they are explicitly removed by the monitor object. An event can also have a specific life time. A time event will be automatically removed from the container when its life time is over. For example, the following time event will be expired after 500ms: 

\verbatim    
    PortMonitor.setEvent("e_ball", 0.5)    
\endverbatim

\Note The following keywords are reserved and cannot be used for event's name: 
\verbatim
    { true, false, not, and, or }
\endverbatim


This simple example shows the arbitration of two different connections to the same port of "yarpview" using Port Monitor objects and time events. 

\verbatim
 ______________                                         
|              | (/Ball/grabber)                          __________ 
| test_grabber  >----------------------------------->|   |          |
|______________|                 ------------------->|---> yarpview |
                                 -                       |__________|
 ______________                  -           
|              | (/Line/grabber) -           
| test_grabber  >-----------------           
|______________|                             
\endverbatim

In this example we want to prioritize the connection "/Ball/grabber" over '/Line/grabber' so when it is activated, it can inhibits the connection '/Line/grabber'. A port monitor is attached to the "/Ball/grabber" which alternatively activates and deactivates it every 5 seconds. When "/Ball/grabber" is active, its data can be delivered to the "yarpview". To resolve conflicting with the image data coming from '/Line/grabber', it also continuously sets a time events (i.e., 'e_ball') which is used as the constraint for not selecting '/Line/grabber'. When "/Ball/grabber" is not active, the time events will be expired and '/Line/grabber' gets the chance to deliver its data to the "yarpview". As the result, "yarpview" switches between different images coming from "/Ball/grabber" and "/Line/grabber" periodically. 


\section req Requirements
\li Enable and compile portmonitor carrier (ENABLE_yarpcar_portmonitor_carrier=ON in YARP cmake).

\li Compile Yarp with Lua binding support (see \ref yarp_swig "Using YARP from python, java, ruby, C#, and other languages").

\li Set LUA_CPATH to include Yarp-Lua binding library  (e.g., export LUA_CPATH=";;;$YARP_ROOT/build/lib/lua/?.so")


\section running Running the example

\li Open a terminal and run yarpserver
\verbatim
   $ yarpserver
\endverbatim

\li Open another terminal (lets call this the receiver terminal) )and change to the 'image_modification' directory and run the application using yarpmanager:
\verbatim 
   $ cd $YARP_ROOT/example/portmonitor/arbitration_tevent
   $ yarpmanager-console --application TestArbitratorImage.xml 
\endverbatim
  

\li run the modules and connect the ports
\verbatim 
   >> run
   >> connect
\endverbatim

\li To stop the application, in the yarpmanager's console, type:
\verbatim
    >> stop
    >> exit
\endverbatim

*/
