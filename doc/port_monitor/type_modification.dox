
/*
 * Copyright: (C) 2011 Robotics, Brain and Cognitive Sciences - Italian Institute of Technology (IIT)
 * Copy Policy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
 *
 */

/**
 * @page type_modification An example which shows how to use a Lua script to create a new data type in a port

\author Ali Paikan

\section desc Description
This example demonstrates how to use the port monitor carrier to substitute a data type with another one. A port monitor plugged into a sender port which expects to see a command such as 'random N' (where N is an integer number). The command is, then, completely substituted with a vector of N random values which will be delivered to the receiver. The port monitor also checks for the validity of the command

\section req Requirements
\li Enable and compile portmonitor carrier (ENABLE_yarpcar_portmonitor_carrier=ON in YARP cmake).

\li Compile Yarp with Lua binding support (see \ref yarp_swig "Using YARP from python, java, ruby, C#, and other languages").

\li Set LUA_CPATH to include Yarp-Lua binding library  (e.g., export LUA_CPATH=";;;$YARP_ROOT/build/lib/lua/?.so")


\section running Running the example

\li Open a terminal and run yarpserver
\verbatim
   $ yarpserver
\endverbatim

\li Open another terminal (lets call this the receiver terminal) and change to the 'type_modification' directory:
\verbatim 
   $ cd $YARP_ROOT/example/portmonitor/type_modification
   $ yarp read /read
\endverbatim

\li Open another terminal (lets call this the sender terminal) and type 
\verbatim
   $ yarp write /write
\endverbatim
  
\li In another terminal connect the port as follow
\verbatim 
   $ yarp connect /write /read tcp+recv.portmonitor+script.lua+file.type_modifier
\endverbatim

Now if you write a valid command in the 'sender' terminal (e.g., random 3), you will see the command is completely substituted by a vector of 3 random values. For example:

\verbatim
[sender terminal]
   random 3 
\endverbatim

\verbatim 
[receiver terminal] 
   0.513401 0.95223 0.916195
\endverbatim

*/
