// Generated by gtkmmproc -- DO NOT MODIFY!


#include <goocanvasmm/bounds.h>
#include <goocanvasmm/private/bounds_p.h>

/* Copyright (C) 1998-2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <goocanvasitem.h>

namespace Goocanvas
{

Bounds::Bounds(double x1, double y1, double x2, double y2)
{
  gobject_.x1 = x1;
  gobject_.y1 = y1;
  gobject_.x2 = x2;
  gobject_.y2 = y2;
}

} //namespace Goocanvas


namespace
{
} // anonymous namespace


namespace Glib
{

Goocanvas::Bounds& wrap(GooCanvasBounds* object)
{
  return *reinterpret_cast<Goocanvas::Bounds*>(object);
}

const Goocanvas::Bounds& wrap(const GooCanvasBounds* object)
{
  return *reinterpret_cast<const Goocanvas::Bounds*>(object);
}

} // namespace Glib


namespace Goocanvas
{


// static
GType Bounds::get_type()
{
  return goo_canvas_bounds_get_type();
}

Bounds::Bounds()
{
  GLIBMM_INITIALIZE_STRUCT(gobject_, GooCanvasBounds);
}

Bounds::Bounds(const GooCanvasBounds* gobject)
{
  if(gobject)
    gobject_ = *gobject;
  else
    GLIBMM_INITIALIZE_STRUCT(gobject_, GooCanvasBounds);
}


 double Bounds::get_x1() const
{
  return gobj()->x1;
}
 
 void Bounds::set_x1(const double& value)
{
  gobj()->x1 = value;
}
 
 double Bounds::get_x2() const
{
  return gobj()->x2;
}
 
 void Bounds::set_x2(const double& value)
{
  gobj()->x2 = value;
}
 
 double Bounds::get_y1() const
{
  return gobj()->y1;
}
 
 void Bounds::set_y1(const double& value)
{
  gobj()->y1 = value;
}
 
 double Bounds::get_y2() const
{
  return gobj()->y2;
}
 
 void Bounds::set_y2(const double& value)
{
  gobj()->y2 = value;
}
 

} // namespace Goocanvas


