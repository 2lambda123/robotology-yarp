// Generated by gtkmmproc -- DO NOT MODIFY!


#include <goocanvasmm/itemmodelsimple.h>
#include <goocanvasmm/private/itemmodelsimple_p.h>

/* Copyright (C) 1998-2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <goocanvasitemsimple.h>


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Goocanvas::ItemModelSimple> wrap(GooCanvasItemModelSimple* object, bool take_copy)
{
  return Glib::RefPtr<Goocanvas::ItemModelSimple>( dynamic_cast<Goocanvas::ItemModelSimple*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Goocanvas
{


/* The *_Class implementation: */

const Glib::Class& ItemModelSimple_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ItemModelSimple_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(goo_canvas_item_model_simple_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  ItemModel::add_interface(get_type());

  }

  return *this;
}


void ItemModelSimple_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* ItemModelSimple_Class::wrap_new(GObject* object)
{
  return new ItemModelSimple((GooCanvasItemModelSimple*)object);
}


/* The implementation: */

GooCanvasItemModelSimple* ItemModelSimple::gobj_copy()
{
  reference();
  return gobj();
}

ItemModelSimple::ItemModelSimple(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

ItemModelSimple::ItemModelSimple(GooCanvasItemModelSimple* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


ItemModelSimple::~ItemModelSimple()
{}


ItemModelSimple::CppClassType ItemModelSimple::itemmodelsimple_class_; // initialize static member

GType ItemModelSimple::get_type()
{
  return itemmodelsimple_class_.init().get_type();
}


GType ItemModelSimple::get_base_type()
{
  return goo_canvas_item_model_simple_get_type();
}


ItemModelSimple::ItemModelSimple()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Glib::Object(Glib::ConstructParams(itemmodelsimple_class_.init()))
{
  

}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<Cairo::Antialias> ItemModelSimple::property_antialias() 
{
  return Glib::PropertyProxy<Cairo::Antialias>(this, "antialias");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Cairo::Antialias> ItemModelSimple::property_antialias() const
{
  return Glib::PropertyProxy_ReadOnly<Cairo::Antialias>(this, "antialias");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<Cairo::FillRule> ItemModelSimple::property_clip_fill_rule() 
{
  return Glib::PropertyProxy<Cairo::FillRule>(this, "clip-fill-rule");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Cairo::FillRule> ItemModelSimple::property_clip_fill_rule() const
{
  return Glib::PropertyProxy_ReadOnly<Cairo::FillRule>(this, "clip-fill-rule");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly<Glib::ustring> ItemModelSimple::property_clip_path() 
{
  return Glib::PropertyProxy_WriteOnly<Glib::ustring>(this, "clip-path");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly<Glib::ustring> ItemModelSimple::property_fill_color() 
{
  return Glib::PropertyProxy_WriteOnly<Glib::ustring>(this, "fill-color");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<guint> ItemModelSimple::property_fill_color_rgba() 
{
  return Glib::PropertyProxy<guint>(this, "fill-color-rgba");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<guint> ItemModelSimple::property_fill_color_rgba() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "fill-color-rgba");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> > ItemModelSimple::property_fill_pattern() 
{
  return Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> >(this, "fill-pattern");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> > ItemModelSimple::property_fill_pattern() const
{
  return Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> >(this, "fill-pattern");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> > ItemModelSimple::property_fill_pixbuf() 
{
  return Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> >(this, "fill-pixbuf");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<Glib::ustring> ItemModelSimple::property_font() 
{
  return Glib::PropertyProxy<Glib::ustring>(this, "font");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> ItemModelSimple::property_font() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "font");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<Pango::FontDescription> ItemModelSimple::property_font_desc() 
{
  return Glib::PropertyProxy<Pango::FontDescription>(this, "font-desc");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Pango::FontDescription> ItemModelSimple::property_font_desc() const
{
  return Glib::PropertyProxy_ReadOnly<Pango::FontDescription>(this, "font-desc");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<Cairo::HintMetrics> ItemModelSimple::property_hint_metrics() 
{
  return Glib::PropertyProxy<Cairo::HintMetrics>(this, "hint-metrics");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Cairo::HintMetrics> ItemModelSimple::property_hint_metrics() const
{
  return Glib::PropertyProxy_ReadOnly<Cairo::HintMetrics>(this, "hint-metrics");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<Cairo::LineCap> ItemModelSimple::property_line_cap() 
{
  return Glib::PropertyProxy<Cairo::LineCap>(this, "line-cap");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Cairo::LineCap> ItemModelSimple::property_line_cap() const
{
  return Glib::PropertyProxy_ReadOnly<Cairo::LineCap>(this, "line-cap");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<LineDash> ItemModelSimple::property_line_dash() 
{
  return Glib::PropertyProxy<LineDash>(this, "line-dash");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<LineDash> ItemModelSimple::property_line_dash() const
{
  return Glib::PropertyProxy_ReadOnly<LineDash>(this, "line-dash");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<Cairo::LineJoin> ItemModelSimple::property_line_join() 
{
  return Glib::PropertyProxy<Cairo::LineJoin>(this, "line-join");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Cairo::LineJoin> ItemModelSimple::property_line_join() const
{
  return Glib::PropertyProxy_ReadOnly<Cairo::LineJoin>(this, "line-join");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> ItemModelSimple::property_line_join_miter_limit() 
{
  return Glib::PropertyProxy<double>(this, "line-join-miter-limit");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> ItemModelSimple::property_line_join_miter_limit() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "line-join-miter-limit");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> ItemModelSimple::property_line_width() 
{
  return Glib::PropertyProxy<double>(this, "line-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> ItemModelSimple::property_line_width() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "line-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<Cairo::Operator> ItemModelSimple::property_operator() 
{
  return Glib::PropertyProxy<Cairo::Operator>(this, "operator");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Cairo::Operator> ItemModelSimple::property_operator() const
{
  return Glib::PropertyProxy_ReadOnly<Cairo::Operator>(this, "operator");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly<Glib::ustring> ItemModelSimple::property_stroke_color() 
{
  return Glib::PropertyProxy_WriteOnly<Glib::ustring>(this, "stroke-color");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<guint> ItemModelSimple::property_stroke_color_rgba() 
{
  return Glib::PropertyProxy<guint>(this, "stroke-color-rgba");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<guint> ItemModelSimple::property_stroke_color_rgba() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "stroke-color-rgba");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> > ItemModelSimple::property_stroke_pattern() 
{
  return Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> >(this, "stroke-pattern");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> > ItemModelSimple::property_stroke_pattern() const
{
  return Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> >(this, "stroke-pattern");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> > ItemModelSimple::property_stroke_pixbuf() 
{
  return Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> >(this, "stroke-pixbuf");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Goocanvas


