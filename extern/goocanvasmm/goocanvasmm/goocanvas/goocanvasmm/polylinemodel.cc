// Generated by gtkmmproc -- DO NOT MODIFY!


#include <goocanvasmm/polylinemodel.h>
#include <goocanvasmm/private/polylinemodel_p.h>

/* Copyright (C) 1998-2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <goocanvaspolyline.h>


namespace Goocanvas
{

PolylineModel::PolylineModel(bool close_path, const Points& points )
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Goocanvas::ItemModelSimple(Glib::ConstructParams(polylinemodel_class_.init(), "close_path",close_path ? TRUE : FALSE, static_cast<char*>(0)))
{
#ifdef GLIBMM_PROPERTIES_ENABLED
  property_points() = points ;
#else
  set_property("points", points);
#endif
}

PolylineModel::PolylineModel(double x1, double y1, double x2, double y2)
:
   // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Goocanvas::ItemModelSimple(Glib::ConstructParams(polylinemodel_class_.init(), "close_path",FALSE , static_cast<char*>(0)))
{
  double data[4] = {x1, y1, x2, y2};
  Goocanvas::Points points(2, data);

#ifdef GLIBMM_PROPERTIES_ENABLED
  property_points() = points ;
#else
  set_property("points", points);
#endif
}

} //namespace Goocanvas


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Goocanvas::PolylineModel> wrap(GooCanvasPolylineModel* object, bool take_copy)
{
  return Glib::RefPtr<Goocanvas::PolylineModel>( dynamic_cast<Goocanvas::PolylineModel*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Goocanvas
{


/* The *_Class implementation: */

const Glib::Class& PolylineModel_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &PolylineModel_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(goo_canvas_polyline_model_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void PolylineModel_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* PolylineModel_Class::wrap_new(GObject* object)
{
  return new PolylineModel((GooCanvasPolylineModel*)object);
}


/* The implementation: */

GooCanvasPolylineModel* PolylineModel::gobj_copy()
{
  reference();
  return gobj();
}

PolylineModel::PolylineModel(const Glib::ConstructParams& construct_params)
:
  Goocanvas::ItemModelSimple(construct_params)
{

}

PolylineModel::PolylineModel(GooCanvasPolylineModel* castitem)
:
  Goocanvas::ItemModelSimple((GooCanvasItemModelSimple*)(castitem))
{}


PolylineModel::~PolylineModel()
{}


PolylineModel::CppClassType PolylineModel::polylinemodel_class_; // initialize static member

GType PolylineModel::get_type()
{
  return polylinemodel_class_.init().get_type();
}


GType PolylineModel::get_base_type()
{
  return goo_canvas_polyline_model_get_type();
}


Glib::RefPtr<PolylineModel> PolylineModel::create(double x1, double y1, double x2, double y2)
{
  return Glib::RefPtr<PolylineModel>( new PolylineModel(x1, y1, x2, y2) );
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> PolylineModel::property_arrow_length() 
{
  return Glib::PropertyProxy<double>(this, "arrow-length");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> PolylineModel::property_arrow_length() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "arrow-length");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> PolylineModel::property_arrow_tip_length() 
{
  return Glib::PropertyProxy<double>(this, "arrow-tip-length");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> PolylineModel::property_arrow_tip_length() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "arrow-tip-length");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> PolylineModel::property_arrow_width() 
{
  return Glib::PropertyProxy<double>(this, "arrow-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> PolylineModel::property_arrow_width() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "arrow-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<bool> PolylineModel::property_close_path() 
{
  return Glib::PropertyProxy<bool>(this, "close-path");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> PolylineModel::property_close_path() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "close-path");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<bool> PolylineModel::property_end_arrow() 
{
  return Glib::PropertyProxy<bool>(this, "end-arrow");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> PolylineModel::property_end_arrow() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "end-arrow");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<Points> PolylineModel::property_points() 
{
  return Glib::PropertyProxy<Points>(this, "points");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Points> PolylineModel::property_points() const
{
  return Glib::PropertyProxy_ReadOnly<Points>(this, "points");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<bool> PolylineModel::property_start_arrow() 
{
  return Glib::PropertyProxy<bool>(this, "start-arrow");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> PolylineModel::property_start_arrow() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "start-arrow");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Goocanvas


