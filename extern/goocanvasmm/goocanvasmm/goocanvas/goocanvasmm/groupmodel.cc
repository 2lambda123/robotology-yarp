// Generated by gtkmmproc -- DO NOT MODIFY!


#include <goocanvasmm/groupmodel.h>
#include <goocanvasmm/private/groupmodel_p.h>

/* Copyright (C) 1998-2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <goocanvasgroup.h>


namespace Goocanvas
{

} //namespace Goocanvas


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Goocanvas::GroupModel> wrap(GooCanvasGroupModel* object, bool take_copy)
{
  return Glib::RefPtr<Goocanvas::GroupModel>( dynamic_cast<Goocanvas::GroupModel*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Goocanvas
{


/* The *_Class implementation: */

const Glib::Class& GroupModel_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &GroupModel_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(goo_canvas_group_model_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void GroupModel_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* GroupModel_Class::wrap_new(GObject* object)
{
  return new GroupModel((GooCanvasGroupModel*)object);
}


/* The implementation: */

GooCanvasGroupModel* GroupModel::gobj_copy()
{
  reference();
  return gobj();
}

GroupModel::GroupModel(const Glib::ConstructParams& construct_params)
:
  Goocanvas::ItemModelSimple(construct_params)
{

}

GroupModel::GroupModel(GooCanvasGroupModel* castitem)
:
  Goocanvas::ItemModelSimple((GooCanvasItemModelSimple*)(castitem))
{}


GroupModel::~GroupModel()
{}


GroupModel::CppClassType GroupModel::groupmodel_class_; // initialize static member

GType GroupModel::get_type()
{
  return groupmodel_class_.init().get_type();
}


GType GroupModel::get_base_type()
{
  return goo_canvas_group_model_get_type();
}


GroupModel::GroupModel()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Goocanvas::ItemModelSimple(Glib::ConstructParams(groupmodel_class_.init()))
{
  

}

Glib::RefPtr<GroupModel> GroupModel::create()
{
  return Glib::RefPtr<GroupModel>( new GroupModel() );
}


} // namespace Goocanvas


