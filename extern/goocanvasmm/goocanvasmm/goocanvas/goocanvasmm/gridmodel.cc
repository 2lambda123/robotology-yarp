// Generated by gtkmmproc -- DO NOT MODIFY!


#include <goocanvasmm/gridmodel.h>
#include <goocanvasmm/private/gridmodel_p.h>

/* Copyright (C) 2008 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <goocanvasgrid.h>


namespace Goocanvas
{

GridModel::GridModel(double x, double y, double width, double height, double x_step, double y_step, double x_offset, double y_offset)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Goocanvas::ItemSimple(Glib::ConstructParams(gridmodel_class_.init(), "x",x,"y",y,"width",width,"height",height,"x-step",x_step,"y-step",y_step,"x-offset",x_offset,"y-offset",y_offset, static_cast<char*>(0)))
{
}

} //namspace Goocanvas


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Goocanvas::GridModel> wrap(GooCanvasGridModel* object, bool take_copy)
{
  return Glib::RefPtr<Goocanvas::GridModel>( dynamic_cast<Goocanvas::GridModel*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Goocanvas
{


/* The *_Class implementation: */

const Glib::Class& GridModel_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &GridModel_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(goo_canvas_grid_model_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void GridModel_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* GridModel_Class::wrap_new(GObject* object)
{
  return new GridModel((GooCanvasGridModel*)object);
}


/* The implementation: */

GooCanvasGridModel* GridModel::gobj_copy()
{
  reference();
  return gobj();
}

GridModel::GridModel(const Glib::ConstructParams& construct_params)
:
  Goocanvas::ItemSimple(construct_params)
{

}

GridModel::GridModel(GooCanvasGridModel* castitem)
:
  Goocanvas::ItemSimple((GooCanvasItemSimple*)(castitem))
{}


GridModel::~GridModel()
{}


GridModel::CppClassType GridModel::gridmodel_class_; // initialize static member

GType GridModel::get_type()
{
  return gridmodel_class_.init().get_type();
}


GType GridModel::get_base_type()
{
  return goo_canvas_grid_model_get_type();
}


Glib::RefPtr<GridModel> GridModel::create(double x, double y, double width, double height, double x_step, double y_step, double x_offset, double y_offset)
{
  return Glib::RefPtr<GridModel>( new GridModel(x, y, width, height, x_step, y_step, x_offset, y_offset) );
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> GridModel::property_x_step() 
{
  return Glib::PropertyProxy<double>(this, "x-step");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> GridModel::property_x_step() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "x-step");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> GridModel::property_y_step() 
{
  return Glib::PropertyProxy<double>(this, "y-step");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> GridModel::property_y_step() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "y-step");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> GridModel::property_x_offset() 
{
  return Glib::PropertyProxy<double>(this, "x-offset");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> GridModel::property_x_offset() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "x-offset");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> GridModel::property_y_offset() 
{
  return Glib::PropertyProxy<double>(this, "y-offset");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> GridModel::property_y_offset() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "y-offset");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> GridModel::property_horz_grid_line_width() 
{
  return Glib::PropertyProxy<double>(this, "horz-grid-line-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> GridModel::property_horz_grid_line_width() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "horz-grid-line-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> GridModel::property_vert_grid_line_width() 
{
  return Glib::PropertyProxy<double>(this, "vert-grid-line-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> GridModel::property_vert_grid_line_width() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "vert-grid-line-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> > GridModel::property_horz_grid_line_pattern() 
{
  return Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> >(this, "horz-grid-line-pattern");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> > GridModel::property_horz_grid_line_pattern() const
{
  return Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> >(this, "horz-grid-line-pattern");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> > GridModel::property_vert_grid_line_pattern() 
{
  return Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> >(this, "vert-grid-line-pattern");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> > GridModel::property_vert_grid_line_pattern() const
{
  return Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> >(this, "vert-grid-line-pattern");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<double> GridModel::property_border_width() 
{
  return Glib::PropertyProxy<double>(this, "border-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<double> GridModel::property_border_width() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "border-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> > GridModel::property_border_pattern() 
{
  return Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> >(this, "border-pattern");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> > GridModel::property_border_pattern() const
{
  return Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> >(this, "border-pattern");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<bool> GridModel::property_vert_grid_lines_on_top() 
{
  return Glib::PropertyProxy<bool>(this, "vert-grid-lines-on-top");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> GridModel::property_vert_grid_lines_on_top() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "vert-grid-lines-on-top");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly<Glib::ustring> GridModel::property_horz_grid_line_color() 
{
  return Glib::PropertyProxy_WriteOnly<Glib::ustring>(this, "horz-grid-line-color");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<guint> GridModel::property_horz_grid_line_color_rgba() 
{
  return Glib::PropertyProxy<guint>(this, "horz-grid-line-color-rgba");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<guint> GridModel::property_horz_grid_line_color_rgba() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "horz-grid-line-color-rgba");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> > GridModel::property_horz_grid_line_pixbuf() 
{
  return Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> >(this, "horz-grid-line-pixbuf");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly<Glib::ustring> GridModel::property_vert_grid_line_color() 
{
  return Glib::PropertyProxy_WriteOnly<Glib::ustring>(this, "vert-grid-line-color");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<guint> GridModel::property_vert_grid_line_color_rgba() 
{
  return Glib::PropertyProxy<guint>(this, "vert-grid-line-color-rgba");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<guint> GridModel::property_vert_grid_line_color_rgba() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "vert-grid-line-color-rgba");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> > GridModel::property_vert_grid_line_pixbuf() 
{
  return Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> >(this, "vert-grid-line-pixbuf");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly<Glib::ustring> GridModel::property_border_color() 
{
  return Glib::PropertyProxy_WriteOnly<Glib::ustring>(this, "border-color");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<guint> GridModel::property_border_color_rgba() 
{
  return Glib::PropertyProxy<guint>(this, "border-color-rgba");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<guint> GridModel::property_border_color_rgba() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "border-color-rgba");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> > GridModel::property_border_pixbuf() 
{
  return Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> >(this, "border-pixbuf");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Goocanvas


