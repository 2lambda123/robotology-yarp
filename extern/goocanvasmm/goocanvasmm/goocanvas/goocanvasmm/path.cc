// Generated by gtkmmproc -- DO NOT MODIFY!


#include <goocanvasmm/path.h>
#include <goocanvasmm/private/path_p.h>

/* Copyright (C) 1998-2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <goocanvaspath.h>


namespace Goocanvas
{

Path::Path(const Glib::ustring& data)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Goocanvas::ItemSimple(Glib::ConstructParams(path_class_.init(), "data",const_cast<char*>(data.c_str()), static_cast<char*>(0)))
{
}

} //namespace Goocanvas


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Goocanvas::Path> wrap(GooCanvasPath* object, bool take_copy)
{
  return Glib::RefPtr<Goocanvas::Path>( dynamic_cast<Goocanvas::Path*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Goocanvas
{


/* The *_Class implementation: */

const Glib::Class& Path_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Path_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(goo_canvas_path_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void Path_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Path_Class::wrap_new(GObject* object)
{
  return new Path((GooCanvasPath*)object);
}


/* The implementation: */

GooCanvasPath* Path::gobj_copy()
{
  reference();
  return gobj();
}

Path::Path(const Glib::ConstructParams& construct_params)
:
  Goocanvas::ItemSimple(construct_params)
{

}

Path::Path(GooCanvasPath* castitem)
:
  Goocanvas::ItemSimple((GooCanvasItemSimple*)(castitem))
{}


Path::~Path()
{}


Path::CppClassType Path::path_class_; // initialize static member

GType Path::get_type()
{
  return path_class_.init().get_type();
}


GType Path::get_base_type()
{
  return goo_canvas_path_get_type();
}


Glib::RefPtr<Path> Path::create(const Glib::ustring& data)
{
  return Glib::RefPtr<Path>( new Path(data) );
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly<Glib::ustring> Path::property_data() 
{
  return Glib::PropertyProxy_WriteOnly<Glib::ustring>(this, "data");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Goocanvas


