/* Copyright (c) 2012  iCub Facility, Istituto Italiano di Tecnologia
 *   @author Daniele E. Domenichelli <daniele.domenichelli@iit.it>
 *
 * This file is part of gtkdataboxmm.
 *
 * gtkdataboxmm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * gtkdataboxmm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(gtkdataboxmm,gtkdatabox)
_CONFIGINCLUDE(gtkdataboxmmconfig.h)
_PINCLUDE(gtkmm/private/widget_p.h)

#include <gtkmm/widget.h>
#include <gtkmm/adjustment.h>

namespace GDatabox
{
class Graph;
class Ruler;

class Databox : public Gtk::Widget
{
    _CLASS_GTKOBJECT(Databox, GtkDatabox, GTK_DATABOX, Gtk::Widget, GtkWidget)

public:
// FIXME make this constructor protected and use gtk_databox_create_box_with_scrollbars_and_rulers instead?
    _CTOR_DEFAULT

// void gtk_databox_create_box_with_scrollbars_and_rulers (GtkWidget ** p_box, GtkWidget ** p_table, gboolean scrollbar_x, gboolean scrollbar_y, gboolean ruler_x, gboolean ruler_y);

    _WRAP_METHOD(int graph_add(const Glib::RefPtr<Graph> &graph), gtk_databox_graph_add)
    _WRAP_METHOD(int graph_remove(const Glib::RefPtr<Graph> &graph), gtk_databox_graph_remove)
    _WRAP_METHOD(int graph_remove_all(), gtk_databox_graph_remove_all)

    _WRAP_METHOD(int auto_rescale(float border), gtk_databox_auto_rescale)
    _WRAP_METHOD(int calculate_extrema(float &min_x, float &max_x, float &min_y, float &max_y), gtk_databox_calculate_extrema)

    _WRAP_METHOD(void set_total_limits(float left, float right, float top, float bottom), gtk_databox_set_total_limits)
    _WRAP_METHOD(void set_visible_limits(float left, float right, float top, float bottom), gtk_databox_set_visible_limits)
    _WRAP_METHOD(void get_total_limits(float &left, float &right, float &top, float &bottom) const, gtk_databox_get_total_limits)
    _WRAP_METHOD(void get_visible_limits(float &left, float &right, float &top, float &bottom) const, gtk_databox_get_visible_limits)

    _WRAP_METHOD(void set_adjustment_x(Gtk::Adjustment &adj), gtk_databox_set_adjustment_x)
    _WRAP_METHOD(void set_adjustment_y(Gtk::Adjustment &adj), gtk_databox_set_adjustment_y)
    _WRAP_METHOD(Gtk::Adjustment* get_adjustment_x(), gtk_databox_get_adjustment_x)
    _WRAP_METHOD(const Gtk::Adjustment* get_adjustment_x() const, gtk_databox_get_adjustment_x, constversion)
    _WRAP_METHOD(Gtk::Adjustment* get_adjustment_y(), gtk_databox_get_adjustment_y)
    _WRAP_METHOD(const Gtk::Adjustment* get_adjustment_y() const, gtk_databox_get_adjustment_y, constversion)

    _WRAP_METHOD(void set_ruler_x(const Ruler& ruler), gtk_databox_set_ruler_x)
    _WRAP_METHOD(void set_ruler_y(const Ruler& ruler), gtk_databox_set_ruler_y)
    _WRAP_METHOD(const Ruler* get_ruler_x() const, gtk_databox_get_ruler_x, constversion)
    _WRAP_METHOD(const Ruler* get_ruler_y() const, gtk_databox_get_ruler_y, constversion)

// void gtk_databox_set_scale_type_x (GtkDatabox * box, GtkDataboxScaleType scale_type);
//    _WRAP_METHOD(void set_scale_type_x(ScaleType scale_type), gtk_databox_set_scale_type_x)
// void gtk_databox_set_scale_type_y (GtkDatabox * box, GtkDataboxScaleType scale_type);
//    _WRAP_METHOD(void set_scale_type_y(ScaleType scale_type), gtk_databox_set_scale_type_y)
// GtkDataboxScaleType gtk_databox_get_scale_type_x (GtkDatabox * box);
//    _WRAP_METHOD(GtkDatabox::ScaleType get_scale_type_x() const, gtk_databox_get_scale_type_x)
// GtkDataboxScaleType gtk_databox_get_scale_type_y (GtkDatabox * box);
//    _WRAP_METHOD(GtkDatabox::ScaleType get_scale_type_y() const, gtk_databox_get_scale_type_y)

    _WRAP_METHOD(void set_enable_selection(bool enable), gtk_databox_set_enable_selection)
    _WRAP_METHOD(void set_enable_zoom(bool enable), gtk_databox_set_enable_zoom)

    _WRAP_METHOD(bool get_enable_selection() const, gtk_databox_get_enable_selection)
    _WRAP_METHOD(bool get_enable_zoom() const, gtk_databox_get_enable_selection)

    _WRAP_METHOD(void zoom_to_selection(), gtk_databox_zoom_to_selection)
    _WRAP_METHOD(void zoom_out(), gtk_databox_zoom_out)
    _WRAP_METHOD(void zoom_home(), gtk_databox_zoom_home)

    _WRAP_METHOD(short value_to_pixel_x(float value), gtk_databox_value_to_pixel_x)
    _WRAP_METHOD(short value_to_pixel_y(float value), gtk_databox_value_to_pixel_x)
    _WRAP_METHOD(float pixel_to_value_x(short pixel), gtk_databox_pixel_to_value_x)
    _WRAP_METHOD(float pixel_to_value_y(short pixel), gtk_databox_pixel_to_value_y)
// void gtk_databox_values_to_pixels (GtkDatabox * box, unsigned int len, const gfloat * values_x, const gfloat * values_y, GdkPoint * pixels);
//    _WRAP_METHOD(void values_to_pixels(unsigned int len, const float* values_x, const float* values_y, Gdk::Point *pixels), gtk_databox_values_to_pixels)

// GdkPixmap* gtk_databox_get_backing_pixmap(GtkDatabox * box);
    _WRAP_METHOD(Glib::RefPtr<Gdk::Pixmap> get_backing_pixmap() const, gtk_databox_get_backing_pixmap)

    _WRAP_SIGNAL(void zoomed(), "zoomed")
// void (*selection_started) (GtkDatabox * box, GtkDataboxValueRectangle * selectionValues);
//    _WRAP_SIGNAL(void selection_started(ValueRectangle *selectionValues), "selection_started")
// void (*selection_changed) (GtkDatabox * box, GtkDataboxValueRectangle * selectionValues);
//    _WRAP_SIGNAL(void selection_changed(ValueRectangle *selectionValues), "selection_changed")
// void (*selection_finalized) (GtkDatabox * box, GtkDataboxValueRectangle * selectionValues);
//    _WRAP_SIGNAL(void selection_finalized(ValueRectangle *selectionValues), "selection_finalized")

    _WRAP_SIGNAL(void selection_canceled(), "selection_canceled")


    _WRAP_PROPERTY("enable_selection", bool)
    _WRAP_PROPERTY("enable_zoom", bool)
    _WRAP_PROPERTY("adjustment_x", Gtk::Adjustment*)
    _WRAP_PROPERTY("adjustment_y", Gtk::Adjustment*)
    _WRAP_PROPERTY("ruler_x", Ruler)
    _WRAP_PROPERTY("ruler_y", Ruler)
//    _WRAP_PROPERTY("scale_type_x", ScaleType)
//    _WRAP_PROPERTY("scale_type_y", ScaleType)
};

} // namespace GDatabox
