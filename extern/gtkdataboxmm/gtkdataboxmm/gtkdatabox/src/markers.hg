/* Copyright (c) 2012  iCub Facility, Istituto Italiano di Tecnologia
 *   @author Daniele E. Domenichelli <daniele.domenichelli@iit.it>
 *
 * This file is part of gtkdataboxmm.
 *
 * gtkdataboxmm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * gtkdataboxmm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(gtkdataboxmm,gtkdatabox)
_CONFIGINCLUDE(gtkdataboxmmconfig.h)
_PINCLUDE(gtkdataboxmm/private/xyc_graph_p.h)

#include <gtkdataboxmm/xyc_graph.h>

namespace GDatabox
{
   /**
    * MarkersPosition:
    * @DATABOX_MARKERS_C: centered on data
    * @DATABOX_MARKERS_N: marker is positioned north of data
    * @DATABOX_MARKERS_E: marker is positioned east of data
    * @DATABOX_MARKERS_S: marker is positioned south of data
    * @DATABOX_MARKERS_W: marker is positioned west of data
    *
    * Position of a marker relative to its respective X/Y value.
    */
   typedef enum
   {
      DATABOX_MARKERS_C = 0,
      DATABOX_MARKERS_N,
      DATABOX_MARKERS_E,
      DATABOX_MARKERS_S,
      DATABOX_MARKERS_W
   }
   MarkersPosition;

   /**
    * MarkersTextPosition:
    * @DATABOX_MARKERS_TEXT_CENTER:   text centered   on marker
    * @DATABOX_MARKERS_TEXT_N:    text north      of marker
    * @DATABOX_MARKERS_TEXT_NE:   text north-east of marker
    * @DATABOX_MARKERS_TEXT_E:    text east       of marker
    * @DATABOX_MARKERS_TEXT_SE:   text south-east of marker
    * @DATABOX_MARKERS_TEXT_S:    text south      of marker
    * @DATABOX_MARKERS_TEXT_SW:   text south-west of marker
    * @DATABOX_MARKERS_TEXT_W:    text west       of marker
    * @DATABOX_MARKERS_TEXT_NW:       text north-west of marker
    *
    * Position of a label relative to its repective marker.
    */
   typedef enum
   {
      DATABOX_MARKERS_TEXT_CENTER = 0,/* text centered   on marker */
      DATABOX_MARKERS_TEXT_N,     /* text north      of marker */
      DATABOX_MARKERS_TEXT_NE,    /* text north-east of marker */
      DATABOX_MARKERS_TEXT_E,     /* text east       of marker */
      DATABOX_MARKERS_TEXT_SE,    /* text south-east of marker */
      DATABOX_MARKERS_TEXT_S,     /* text south      of marker */
      DATABOX_MARKERS_TEXT_SW,    /* text south-west of marker */
      DATABOX_MARKERS_TEXT_W,     /* text west       of marker */
      DATABOX_MARKERS_TEXT_NW     /* text north-west of marker */
   }
   MarkersTextPosition;

   /**
    * MarkersType:
    * @DATABOX_MARKERS_NONE:    No Marker (just text)
    * @DATABOX_MARKERS_TRIANGLE:    Marker is a triangle
    * @DATABOX_MARKERS_SOLID_LINE:  Marker is a solid line
    * @DATABOX_MARKERS_DASHED_LINE: Marker is a dashed line
    *
    * Type of the marker
    */
   typedef enum
   {
      DATABOX_MARKERS_NONE = 0, /* No Marker (just text) */
      DATABOX_MARKERS_TRIANGLE, /* Marker is a triangle */
      DATABOX_MARKERS_SOLID_LINE,   /* Marker is a solid line */
      DATABOX_MARKERS_DASHED_LINE   /* Marker is a dashed line */
   }
   MarkersType;

//   _WRAP_ENUM(MarkersPosition, GtkDataboxMarkersPosition)
//   _WRAP_ENUM(MarkersTextPosition, GtkDataboxMarkersTextPosition)
//   _WRAP_ENUM(MarkersType, GtkDataboxMarkersType)

class Markers : public XYCGraph
{
    _CLASS_GOBJECT(Markers, GtkDataboxMarkers, GTK_DATABOX_MARKERS, XYCGraph, GtkDataboxXYCGraph)

protected:
    Markers(unsigned int len, float *X, float *Y, const Gdk::Color &color, unsigned int size = 1);
    _IGNORE(gtk_databox_markers_new)

public:
    static Glib::RefPtr<Markers> create(unsigned int length, float * X, float * Y, const Gdk::Color &color, unsigned int size = 1);

// void gtk_databox_markers_set_position (GtkDataboxMarkers * markers, unsigned int index, GtkDataboxMarkersPosition position);
    _WRAP_METHOD(void set_position(guint index, MarkersPosition position), gtk_databox_markers_set_position)
//    _WRAP_METHOD(void set_position(unsigned int index, MarkersPosition position), gtk_databox_markers_set_position)
// void gtk_databox_markers_set_label (GtkDataboxMarkers * markers, unsigned int index, MarkersTextPosition label_position, gchar * text, gboolean boxed);
//    _WRAP_METHOD(void set_label(unsigned int index, MarkersTextPosition label_position, string text, bool boxed), gtk_databox_markers_set_label)
};

} // namespace GDatabox
