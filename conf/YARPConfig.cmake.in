
IF (NOT YARP_FOUND)

MESSAGE(STATUS "Using YARP")

SET(YARP_LIBRARIES "@YARP_LIBRARIES@" CACHE INTERNAL "Libraries needed for YARP")
SET(YARP_INCLUDES "@YARP_INCLUDES@" CACHE INTERNAL "Include directories needed for YARP")
SET(YARP_DEFINES "@YARP_DEFINES@" CACHE INTERNAL "Definitions needed for YARP")
#MESSAGE(STATUS "**** YARP_LIBRARIES: ${YARP_LIBRARIES}")

SET(CREATE_DEVICE_LIBRARY_MODULES @CREATE_DEVICE_LIBRARY_MODULES@)
SET(MERGE_DEVICE_LIBRARY_MODULES @MERGE_DEVICE_LIBRARY_MODULES@)

LINK_LIBRARIES(${YARP_LIBRARIES})
INCLUDE_DIRECTORIES(${YARP_INCLUDES})
ADD_DEFINITIONS(${YARP_DEFINES})

# pick up YARP's helper modules
SET(YARP_MODULE_PATH "@CMAKE_MODULE_PATH@")
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH};${YARP_MODULE_PATH})

# note location of independent yarp modules, if compiled
IF (NOT yarpmod_DIR)
  SET(yarpmod_DIR "@CMAKE_BINARY_DIR@")
ENDIF (NOT yarpmod_DIR)

# make some useful YARP macros available
IF (EXISTS ${YARP_MODULE_PATH}/YarpDevice.cmake)
  INCLUDE(YarpDevice)
ENDIF (EXISTS ${YARP_MODULE_PATH}/YarpDevice.cmake)

# merge device modules if desired
IF (CREATE_DEVICE_LIBRARY_MODULES)
  IF (MERGE_DEVICE_LIBRARY_MODULES)
    FIND_PACKAGE(yarpmod)
    IF (MSVC)
      LINK_LIBRARIES(optimized yarpmod debug yarpmodd)
      SET (yarpmodd_LIB_DEPENDS "${yarpmod_LIB_DEPENDS}")
    ELSE (MSVC)
      LINK_LIBRARIES(yarpmod)
    ENDIF (MSVC)
    LINK_LIBRARIES(${YARP_LIBRARIES})
  ENDIF (MERGE_DEVICE_LIBRARY_MODULES)
ENDIF (CREATE_DEVICE_LIBRARY_MODULES)

SET (YARP_FOUND TRUE)
ENDIF (NOT YARP_FOUND)
