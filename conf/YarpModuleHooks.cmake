
#########################################################################
##
## Yet Another Device Compiling Monster
##   --paulfitz
##
#########################################################################


IF (NOT DEVICE_COMPILE)

# Choose whether to merge library source code.
SET(MERGE_DEVICE_LIBS TRUE)

SET(DEVICE_PREFIX "yarpdev_")

SET(DEVICE_COMPILE TRUE)

#SET(YARPY_LIB_FLAG EXCLUDE_FROM_ALL)

SET(YARPY_DEV_LIST)
SET(YARPY_DEV_SRC_LIST)

MACRO(ADD_LIBRARY LIBNAME)
  SET(MYNAME "${DEVICE_PREFIX}${LIBNAME}")
  MESSAGE(STATUS "adding library ${MYNAME}: ${ARGN} ${YARPY_DEV_SRC_LIST}")
  IF (MERGE_DEVICE_LIBS)
    # this library is not actually needed
    _ADD_LIBRARY(${MYNAME} ${YARPY_LIB_FLAG} ${ARGN} ${YARPY_DEV_SRC_LIST})
    FOREACH(SRC ${ARGN})
      GET_SOURCE_FILE_PROPERTY(SRC2 ${SRC} LOCATION)
      SET(YARPY_SRC_LIST ${YARPY_SRC_LIST} ${SRC2})
    ENDFOREACH(SRC ${ARGN})
  ELSE (MERGE_DEVICE_LIBS)
    _ADD_LIBRARY(${MYNAME} ${ARGN} ${YARPY_DEV_SRC_LIST})
    SET(YARPY_SRC_LIST)
  ENDIF (MERGE_DEVICE_LIBS)
  SET(YARPY_LIB_LIST ${MYNAME} ${YARPY_LIB_LIST})
  SET(YARPY_DEV_SRC_LIST)
ENDMACRO(ADD_LIBRARY LIBNAME)

MACRO(SET_TARGET_PROPERTIES LIBNAME)
  SET(MYNAME "${DEVICE_PREFIX}${LIBNAME}")
  MESSAGE(STATUS "setting properties for ${MYNAME}: ${ARGN}")
  _SET_TARGET_PROPERTIES(${MYNAME} ${ARGN})
ENDMACRO(SET_TARGET_PROPERTIES LIBNAME)

MACRO(ADD_EXECUTABLE EXENAME)
  MESSAGE(STATUS "ignoring executable ${EXENAME}: ${ARGN}")
  _ADD_EXECUTABLE(${EXENAME} ${YARPY_LIB_FLAG} ${ARGN})
ENDMACRO(ADD_EXECUTABLE EXENAME)

IF (MERGE_DEVICE_LIBS)
  MACRO(ADD_DEFINITIONS)
    MESSAGE(STATUS "adding definitions: ${ARGN}")
    _ADD_DEFINITIONS(${ARGN})
    SET(YARPY_DEF_LIST ${ARGN})
  ENDMACRO(ADD_DEFINITIONS)
ENDIF (MERGE_DEVICE_LIBS)

MACRO(LINK_LIBRARIES)
  MESSAGE(STATUS "adding libraries: ${ARGN}")
  _LINK_LIBRARIES(${ARGN})
  SET(YARPY_XLIB_LIST ${ARGN})
ENDMACRO(LINK_LIBRARIES)

MACRO(ADD_SUBDIRECTORY SUBDIR)
  _ADD_SUBDIRECTORY(${SUBDIR} ${ARGN})
  GET_DIRECTORY_PROPERTY(LIBS DIRECTORY ${SUBDIR} DEFINITION YARPY_LIB_LIST)
  GET_DIRECTORY_PROPERTY(XLIBS DIRECTORY ${SUBDIR} DEFINITION YARPY_XLIB_LIST)
  GET_DIRECTORY_PROPERTY(SRCS DIRECTORY ${SUBDIR} DEFINITION YARPY_SRC_LIST)
  GET_DIRECTORY_PROPERTY(INCS DIRECTORY ${SUBDIR} INCLUDE_DIRECTORIES)
  GET_DIRECTORY_PROPERTY(LNKS DIRECTORY ${SUBDIR} LINK_DIRECTORIES)
  GET_DIRECTORY_PROPERTY(DEFS DIRECTORY ${SUBDIR} DEFINITION YARPY_DEF_LIST)
  GET_DIRECTORY_PROPERTY(DEVS DIRECTORY ${SUBDIR} DEFINITION YARPY_DEV_LIST)
  SET(YARPY_LIB_LIST0 ${YARPY_LIB_LIST0} ${LIBS})
  SET(YARPY_XLIB_LIST0 ${YARPY_XLIB_LIST0} ${XLIBS})
  SET(YARPY_SRC_LIST0 ${YARPY_SRC_LIST0} ${SRCS})
  SET(YARPY_INC_LIST0 ${YARPY_INC_LIST0} ${INCS})
  SET(YARPY_LNK_LIST0 ${YARPY_LNK_LIST0} ${LNKS})
  SET(YARPY_DEF_LIST0 ${YARPY_DEF_LIST0} ${DEFS})
  SET(YARPY_DEV_LIST0 ${YARPY_DEV_LIST0} ${DEVS})
ENDMACRO(ADD_SUBDIRECTORY SUBDIR)

MACRO(YARP_PREPARE_DEVICES)
  FOREACH(LIB ${YARPY_LIB_LIST0})
   MESSAGE(STATUS "checking ${LIB}")
   GET_TARGET_PROPERTY(NAME ${LIB} YARPDEV_NAME)
   IF (FALSE)
    GET_TARGET_PROPERTY(WRAPPER ${LIB} YARPDEV_WRAPPERS)
    GET_TARGET_PROPERTY(INCS ${LIB} YARPDEV_INCLUDES)
    GET_TARGET_PROPERTY(TYPE ${LIB} YARPDEV_TYPES)
    GET_TARGET_PROPERTY(DIR ${LIB} YARPDEV_TYPES)
    IF(WRAPPER STREQUAL "None")
      SET(WRAPPER "")
    ENDIF(WRAPPER STREQUAL "None")
    MESSAGE(STATUS "  ${LIB} name:    ${NAME}")
    MESSAGE(STATUS "  ${LIB} wrapper: ${WRAPPER}")
    MESSAGE(STATUS "  ${LIB} include: ${INCS}")
    MESSAGE(STATUS "  ${LIB} type:    ${TYPE}")
    SET(YARPDEV_NAME ${NAME})
    SET(YARPDEV_TYPE ${TYPE})
    SET(YARPDEV_INCLUDE ${INCS})
    SET(YARPDEV_WRAPPER ${WRAPPER})
    CONFIGURE_FILE(${YARP_MODULE_PATH}/yarpdev_helper.cpp.in
       ${CMAKE_CURRENT_BINARY_DIR}/add_${NAME}.cpp @ONLY  IMMEDIATE)

		  # aggregate this into our global list
#		  WRITE_FILE(${ADDER_CPP} "add_${NAME}();" APPEND)
#		  WRITE_FILE(${ADDER_H} "extern void add_${NAME}();" APPEND)

   ELSE (FALSE)
    #MESSAGE(ERROR "need properties for ${LIB}")
   ENDIF (FALSE)
  ENDFOREACH(LIB ${YARPY_LIB_LIST0})

  SET(YARP_CODE_PRE)
  SET(YARP_CODE_POST)
  FOREACH(dev ${YARPY_DEV_LIST0})
    SET(YARP_CODE_PRE ${YARP_CODE_PRE} "extern void add_${dev}();\n")
    SET(YARP_CODE_POST ${YARP_CODE_POST} "add_${dev}();\n")
  ENDFOREACH(dev ${YARPY_DEV_LIST0})
  CONFIGURE_FILE(${YARP_MODULE_PATH}/yarpdev_lib.cpp.in
     ${CMAKE_CURRENT_BINARY_DIR}/all_add_yarpdev.cpp @ONLY  IMMEDIATE)

 IF (MERGE_DEVICE_LIBS)
  INCLUDE_DIRECTORIES(${YARPY_INC_LIST0})
  LINK_DIRECTORIES(${YARPY_LNK_LIST0})
  _ADD_DEFINITIONS(${YARPY_DEF_LIST0})
  _LINK_LIBRARIES(${YARPY_XLIB_LIST0})
  _ADD_LIBRARY(devices ${YARPY_SRC_LIST0} ${CMAKE_CURRENT_BINARY_DIR}/all_add_yarpdev.cpp)
 ELSE (MERGE_DEVICE_LIBS)
  _ADD_LIBRARY(devices ${CMAKE_CURRENT_BINARY_DIR}/all_add_yarpdev.cpp)
  FOREACH(LIB ${YARPY_LIB_LIST0})
    MESSAGE(STATUS "adding --> ${LIB}")
    TARGET_LINK_LIBRARIES(devices ${LIB})
  ENDFOREACH(LIB ${YARPY_LIB_LIST0})
 ENDIF (MERGE_DEVICE_LIBS)

ENDMACRO(YARP_PREPARE_DEVICES)

MACRO(ADD_DEVICE_NORMALIZED devname type include)
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
  MESSAGE(STATUS "Setting up device ${devname}")
  MESSAGE(STATUS "  type: ${type}")
  MESSAGE(STATUS "  include: ${include}")
  SET(YARPDEV_NAME ${devname})
  SET(YARPDEV_TYPE ${type})
  SET(YARPDEV_INCLUDE ${include})
  SET(YARPDEV_WRAPPER "")
  SET(ENABLE_YARPDEV_NAME "1")
  SET(fdir ${CMAKE_CURRENT_BINARY_DIR})
  SET(fname ${fdir}/yarpdev_add_${devname}.cpp)
  CONFIGURE_FILE(${YARP_MODULE_PATH}/yarpdev_helper.cpp.in
     ${fname} @ONLY  IMMEDIATE)
  MESSAGE(STATUS "Device ${devname} creation code in ${fname}")
  SET(YARPY_DEV_SRC_LIST ${YARPY_DEV_SRC_LIST} ${fname})
  SET(YARPY_DEV_LIST ${YARPY_DEV_LIST} ${devname})
ENDMACRO(ADD_DEVICE_NORMALIZED devname type include)

MACRO(PREPARE_DEVICE devname)
  SET(EXPECT_TYPE FALSE)
  SET(EXPECT_INCLUDE FALSE)
  SET(THE_TYPE "")
  SET(THE_INCLUDE "")
  FOREACH(arg ${ARGN})
    IF(EXPECT_TYPE)
      SET(THE_TYPE ${arg})
      SET(EXPECT_TYPE FALSE)
    ENDIF(EXPECT_TYPE)
    IF(EXPECT_INCLUDE)
      SET(THE_INCLUDE ${arg})
      SET(EXPECT_INCLUDE FALSE)
    ENDIF(EXPECT_INCLUDE)
    IF(arg STREQUAL "TYPE")
      SET(EXPECT_TYPE TRUE)
    ENDIF(arg STREQUAL "TYPE")
    IF(arg STREQUAL "INCLUDE")
      SET(EXPECT_INCLUDE TRUE)
    ENDIF(arg STREQUAL "INCLUDE")
  ENDFOREACH(arg ${ARGN})
  IF(THE_TYPE AND THE_INCLUDE)
    ADD_DEVICE_NORMALIZED(${devname} ${THE_TYPE} ${THE_INCLUDE})
  ELSE(THE_TYPE AND THE_INCLUDE)
    MESSAGE(STATUS "Not enough information to create ${devname}")
    MESSAGE(STATUS "  type: ${THE_TYPE}")
    MESSAGE(STATUS "  include: ${THE_INCLUDE}")
  ENDIF(THE_TYPE AND THE_INCLUDE)
ENDMACRO(PREPARE_DEVICE devname)

ENDIF(NOT DEVICE_COMPILE)
