
===============================================================================

INTRODUCTION
------------

This is YARP2, a new version of the YARP robot library set.

It helps do stuff with robots (or avoid doing stuff with robots by 
spending your time writing libraries).

License and copyright information is in COPYING.

===============================================================================

QUICKSTART
----------

There are a few different ways to compile YARP2 (see below).
Probably the easiest right now is using "cmake" (see www.cmake.org).

In linux, in this directory, type:

  cmake .
  make
  make test

===============================================================================

STATUS
------

YARP2 is usable by brave developers.  Watch out for the following:

+ compared to YARP1, there are a lot of missing parts.  The library
  in src/libYARP_OS_compat will help if you want to mingle new and old.

+ yarp::sig::Image is a stub - it has a very bare minimum of functionality.
  You can still use YARPImage; the classes are network compatible.

+ yarp::os::Bottle doesn't have everything that YARPBottle had.  You can
  still use YARPBottle; the classes are network compatible.

+ libYARP_OS - fairly complete
+ libYARP_OS_compat - fairly complete
+ libYARP_sig - a stub
+ libYARP_sig_compat - a stub

For help, and to complain, email paulfitz@alum.mit.edu


===============================================================================

COMPILATION and INSTALLATION
----------------------------

If you are on a debian linux system, type:

  # get hand-crafted makefiles
  # see sections below for alternative makefile sources
  make -f Makefile.man maker

If that works, type:

  make

If that works, type:

  make deb

There should now be installable packages in a directory called "package".
Install using:

  dpkg -i <package filename>

The packages can be deinstalled using standard debian package management.

Apart from that, we are currently lacking install documentation.  So
if you need that, you're probably better off not using this version of
YARP.

There are some project files for windows.  They assume that you have two 
environment variables set:
  ACE_INCLUDE
  ACE_LIB
pointing to include files and library files for ACE.

===============================================================================

AUTOCONFISCATION
----------------

Currently, we use non-autoconf-based makefiles.

But autoconf+automake support is starting to be put together.  If you
checked out from CVS and have a configure.ac file but would like to
have a configure file, try:

  # debian packages: libtool autoconf automake1.8 (version num arbitrary)
  libtoolize
  autoheader
  aclocal && automake -ac
  libtoolize --force
  autoheader
  aclocal && automake -ac
  autoconf

You should now have a configure file.
Try:

  ./configure

All going well, you have some new Makefiles.  Try:

  make

===============================================================================

CMAKE
-----

Currently, we use non-cmake-based makefiles.

But cmake support is starting to be put together.  If you
checked out from CVS and have only a CMakeLists.txt file but would like to
have a makefile or visual studio project, try installing "cmake" and
then running it and following its hints.


===============================================================================

DOCUMENTATION
-------------

If you are on a debian linux system, make sure you have "doxygen" and type:

  # get hand-crafted makefiles
  make -f Makefile.man maker
  make dox

You should be able to browse library documentation from:

  doc/index.html

