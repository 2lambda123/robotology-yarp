
Welcome to YARP2.
License and copyright information is in COPYING.
For a brief introduction and project status see NEWS.

===============================================================================

COMPILATION and INSTALLATION
----------------------------

There are a few different ways to compile YARP2.

See if there is a file called "QUICKSTART".  If so, then you have a 
distribution of YARP tailored to your specific operating system,
and the instructions in this file will give the fastest way
to get going.

We now describe two general methods for compiling YARP2: "cmake" and
"autoconf".

If you are using some version of Microsoft Windows, we recommend cmake
(see CMAKE section below).

If you are using some version of Linux, you can use cmake or 
autoconf (see AUTOCONF section below).

In all other cases, we recommend autoconf.


===============================================================================

PREREQUISITES *** important! read this! ***
-------------

YARP2 depends on the ACE communications library.  Make sure you install
ACE before following any of the steps below.  See:
  http://www.cs.wustl.edu/~schmidt/ACE.html
for download and installation instructions.  Some linux distributions
have binary packages for ACE (e.g. debian has "libace-dev").

On Microsoft Windows, please set the ACE_ROOT environment variable to
the location of your ACE install (a directory called "ACE_wrappers").
The directory in which the ACE library resides will also need to be in
your PATH environment variable in other for YARP executables to be
able to run.


===============================================================================

CMAKE
-----

Cmake (www.cmake.org) can create developer studio projects, makefiles,
or other build files for a number of operating systems and tool sets.

Download cmake from www.cmake.org or install it as a package if available
for your system.

In Linux, in the YARP2 directory, type:

  cmake .
  make
  make test

In Microsoft Windows, run cmake, answer "Where is the source code" by
browsing to the YARP2 directory.

Answer "Where to build the binaries" with whatever you like.

Then hit the "Configure" button.  You'll be prompted for the Generator
you want (e.g. "NMake Makefiles", "Visual Studio 6", ...).  Pick
the build tool you are comfortable with.

A bunch of options will show up in red.  DON'T PANIC.  They may
all be correct.  If you don't understand them, you can try just 
hitting the "Configure" button to accept them.

If applicable for your chosen generator, make sure that
"CMAKE_BUILD_TYPE" is set to "Release" (as opposed to Debug) if that
is how you compiled ACE.

Make sure that the "ACE_INCLUDE_DIR" and "ACE_LIBRARY" values are set
to something related to where your installed ACE, fixing them manually
if necessary.

Hit the "Configure" button again if needed, then "OK".

In the directory you gave as "Where to build the binaries" should be
everything you need to compile, by opening a workspace, or running nmake,
etc.

After compilation, executables are in the "bin" directory and libraries are
in the "lib" directory.


===============================================================================

AUTOCONF
--------

This method requires the autoconf, automake, and libtool tools (e.g.
debian packages libtool autoconf automake1.8).

If you checked out from CVS and have a configure.ac file but would
like to produce a configure file, try:

  ./bootstrap

You should now have a configure file.
Try:

  ./configure

All going well, you have some new Makefiles.  Try:

  make
  make check

A man page will be generated for the "yarp" executable if the 
"docbook-to-man" program is installed on your system at compile-time.

If you do a:

  make install

Executables and libraries are installed on your system (use the --prefix=
option to configure to control where).

"yarp" is the main executable

A man page will be generated for the "yarp" executable if the 
"docbook-to-man" program is installed on your system at compile-time.



===============================================================================

hand-crafted Makefiles
----------------------------

If you are on a debian linux system, there are some old hand-crafted
Makefiles lying around.  To use them, type:

  make -f Makefile.man [TARGET]

For example, to compile everything:

  make -f Makefile.man

To make debian packages:

  make -f Makefile.man deb

There should now be installable packages in a directory called "package".
Install using:

  dpkg -i <package filename>

The packages can be deinstalled using standard debian package management.


You can make documentation if you have "doxygen":

  make -f Makefile.man dox

You should be able to browse library documentation from:

  doc/index.html

