
/*
 * Copyright (C) 2010 RobotCub Consortium
 * CopyPolicy: Released under the terms of the GNU GPL v2.0.
 *
 */

/** 
 * @page rpc_ports RPC ports

\author Paul Fitzpatrick

THIS IS AN EARLY DRAFT, not a real tutorial yet.

RPC stands for "Remote Procedure Call", and in YARP is used to
refer to communication that consists of a message and a reply to
that message.  Historically, YARP has stressed streaming communication
(without replies) because in our experience it leads to more 
robust and scalable control logic.  However, RPC definitely has
its place, and this tutorial describes how to do it in YARP.

\section rpc_ports_basics RPC using regular YARP ports

The basic mechanism for getting replies with YARP is described in 
the \ref port_expert_reply "getting replies" section of the
\ref port_expert "Port Power" tutorial.

\section rpc_ports_special RPC using specialized YARP ports

If you intend to use ports for RPC alone, you can use
the yarp::os::RpcClient and yarp::os::RpcServer classes.
These are just like the regular yarp::os::Port class,
except that streaming operation is prohibited.
By using these classes, YARP can check for accidental
misusage of the ports, and give more helpful error messages.

\section rpc_ports_sniffing Monitoring RPC communication

Normal streaming communication in YARP is very easy to monitor,
just connect another port to the sender.  For RPC communication,
we have to be a bit more careful, since senders are affected
by receivers.

If the port /foo accepts and replies to commands, you can
monitor that traffic by doing something like:
\verbatim
yarp read /read
yarp connect /foo /read tcp+log.in
\endverbatim

This needs a little explanation.  The "yarp connect" utility is used
like this:
\verbatim
yarp connect /source /target [protocol]
\endverbatim

The protocol in this case is specified to be tcp (which is the default),
but with an added "+log.in" decoration.  This is a "carrier modifier"
that tells YARP that the connection has a special purpose, in this
case to log traffic that targets the source port.  Without that
modifier, this connection would be forbidden if the RPC port is already
connected to a client, and even if it were allowed it would misbehave
(the source port would expect replies from it!)

 *
 */

