
/** 
 * @page carrier_expert Creating carriers for new kinds of connections

\author Paul Fitzpatrick

In YARP, ports talk to each other via connections.  Types of connections
are called "carriers".  See \ref carrier_config for information about
how to configure connections using existing carriers.  Here, we are going
to look at creating new kinds of carriers.  Why might you want to do this?

 \li You need to use a kind of network that YARP doesn't 
     currently support.  For example, we don't currently have
     support for QNX message passing (even though, years ago, that
     was the very first carrier supported by YARP - we remember it
     fondly).

 \li You don't like some aspect of YARP's current carriers.  No problem,
     just make your own variation and plug it in.  (Please call it a 
     different name though so as not to destroy the possibility of
     interoperation).  If it works well, please consider telling us 
     about it.

 \li You want to support network-level interoperation with non-YARP based
     programs.

\section carrier_expert_preliminaries Coding preliminaries

The implementation of carriers is in the namespace yarp::os::impl,
rather than the regular namespace yarp::os.  Be warned that classes in
the yarp::os::impl ("implementation") namespace may change more from
release to release than those in yarp::os (intended to be a stable
user API).

Header files for implementation classes may have dependencies on 
header files from the ACE library.  This means that you need
to take some care to make sure that the ACE header files on your
system match those used to compile YARP.  

\section carrier_expert_classes Important classes

You should skim the documentation of the following classes:

 \li yarp::os::impl::Carrier
 \li yarp::os::impl::Carriers

You'll be able to include them in your code as follows:

\code
#include <yarp/os/impl/Carrier.h>
#include <yarp/os/impl/Carriers.h>
using namespace yarp::os::impl;
\endcode

\section carrier_expert_basics The basics

A few things you need to know.  An important property of YARP carriers is that they do not need
to be constant throughout a connection.  So, for example, a connection may begin using a TCP
carrier (and in practice all connections currently do in fact start with TCP, though this is not
required), and then switch to something more efficient after some handshaking. So watch out for 
that.  In the \ref yarp_guts "YARP Guts" tutorial, you can see a little more
how a carrier and connections relate.

When a port is registered with the YARP name server, an initial carrier type is specified.
For example, the port associated with the name server itself might be registered as:

\verbatim
  registration name /root ip 192.168.1.3 port 10000 type tcp
\endverbatim

The "tcp" type specified there does not necessarily mean that this port can only accept "tcp" carriers,
it just means that that is how one should begin a connection to this port.

The first eight bytes sent on a connection are special in YARP.  They act as a "magic number"
for identifying the carrier to switch to.  Some flags for identifying variants of a carrier
might be included as well.  This is a lot like how common file formats work and other network
protocols work.  See \ref yarp_protocol for a table of "official" YARP magic numbers.

Once you've made up a new eight-byte sequence to name your new
carrier, you then have a huge amount of freedom in how it works.  The
abstract phases of YARP communication are specified, but their
representation "on the wire" is basically up to you.  This means you
have a decent shot at matching some other protocol you might have to
interface with.  Even the required eight-byte sequence requirement can
be loosened, with a bit of care.

\section carrier_expert_example A first example

Here is a example that takes an existing carrier, the \ref carrier_config_text "ordinary text-mode carrier", and modifies it slightly (see example/carrier/carrier_stub.cpp).  The change is very small; we name our new carrier "test" (as 
opposed to "text") and change its identifying 8-byte header from 
"CONNECT " to "TESTTEST".

\include example/carrier/carrier_stub.cpp

The key steps are:

 \li We create a new class for our new carrier, by subclassing something descended from yarp::os::impl::Carrier (in this case yarp::os::impl::TextCarrier).

 \li We make whatever customizations we want to that carrier.  It is very
 important to override the "factory" method Carrier::create to return
 an instance of our new class.  We also define the name associated with
 our class by overriding Carrier::getName.

 \li At the start of our program, we register an instance of that class 
 in a call to Carriers::addCarrierPrototype.

Having taken those steps, we can make connections using our new carrier
(called "test" in the example code):

\code
Network::connect(...,...,"test");
\endcode

To make connections of this type from the command line with the 
\ref yarp "yarp companion" (the "yarp" command), you need to insert your 
carrier in the YARP library, or else compile a customized version of 
the companion.  Here is the companion's source code in its entirety:

\code
#include <yarp/os/Network.h>
using namespace yarp::os;
int main(int argc, char *argv[]) {
    Network yarp;
    return Network::main(argc,argv);
}
\endcode

So there isn't much to it to just insert a call to 
Carriers::addCarrierPrototype in there.  Otherwise, to put
the new carrier in the YARP library proper, do a little pattern-matching
in the constructor for the yarp::os::impl::Carriers class
at src/libYARP_OS/src/Carriers.cpp.


\section carrier_expert_custom Customizing behavior

The previous example just shows enough to make a carrier that is a small
tweak of an existing one, but doesn't help much with setting up a completely
new carrier.

For that, we need to make a subclass of yarp::os::impl::Carrier.  There's 
a lot of methods that we need to specify.  First, some easy ones:

<dl>

<dt>Carrier::create</dt>
<dd>A factory method - just return a new instance of your carrier.</dd>

<dt>Carrier::getName</dt>

<dd>Give the human-readable name of your carrier - this is how you
would select it in "yarp connect /from /to CARRIERNAME" for example.</dd>

<dt>Carrier::isConnectionless</dt>

<dd>Return a flag specifying whether your carrier is "connection-based"
or "connectionless" in the tcp/udp sense.  If connectionless, YARP will
assume, for example, that failures of the connection on one side may not 
be noticed on the other side, and take appropriate action.
</dd>

<dt>Carrier::canAccept</dt>

<dd>Return true if your implementation can handle being the destination
of a connection. Normally this should be true.</dd>

<dt>Carrier::canOffer</dt>

<dd>Return true if your implementation can handle being the initiator
of a connection. Normally this should be true.</dd>

<dt>Carrier::isTextMode</dt>

<dd>Return true if your carrier is text-mode, for human reading/writing.
YARP will use textual variants of its administrative messages if this is
the case, and objects that serialize using the YARP standard "bottle" 
format (see \ref data_rep) will serialize in text form.
</dd>

<dt>Carrier::canEscape</dt>

<dd>Return true if your carrier has a way of distinguishing user payload
data from administrative headers.  If false, YARP will not try to send any
administrative headers on your carrier (e.g. disconnection requests, for
example).  Normally this should be true.
</dd>

<dt>Carrier::requireAck</dt>

<dd>Does you want YARP to use flow control?  If this is set, YARP
will attempt to send an acknowledgement back to the sender after receiving
data, even in streaming operation.</dd>

<dt>Carrier::supportReply</dt>

<dd>Does your carrier support bidirectional communication?</dd>

<dt>Carrier::isLocal</dt>

<dd>Is your carrier process-local?  That is, it can only used by threads
sharing the same memory space?  This should normally be false (but, if true,
YARP will make a lot of optimizations obviously).</dd>

<dt>Carrier::toString</dt>

<dd>Give a textual representation of the state of the carrier.  There
is no standard for this, it is not much used.</dd>

</dl>

Okay, that's a lot of stuff, but it is all "meta-data" - it describes
your carrier, but doesn't implement it.  It is important to get right 
though since it controls how YARP will use your carrier.

Now let us get down to implementation.  It might be worth having
\ref yarp_protocol open on a page beside this one.  Basically,
a connection in YARP has several phases:

<ul>


<li>Initiation phase - an initial connection is been made.</li>

<li>Header phase - the initiator of the connection sends an 8 byte
"magic number" identifying the desired carrier type.  The recipient
of the connection waits for that 8 byte number.  Once that is done,
the carrier implementer is free to add on any further information
they'd like to send.  Carriers are strongly encouraged to send
the name of the port associated with the initiator of the connection,
but are free to do this however they like.</li>

<li>Header reply phase - an opportunity for the recipient to talk back
to the initiator, if needed.  Carriers are free to do what they want
here, including extended bidirectional communication.</li>

<li>Index phase - when the user (or YARP wants) to send data over the
connection, the carrier is given the opportunity to send some
prior information (for example, lengths).</li>

<li>Payload data phase - here the carrier encodes user (or YARP) data.</li>

<li>Acknowledgement phase - if the carrier wants acknowledgements to
happen, this is when YARP will request them.  If a reply from the other
side is expected, this will happen before the acknowledgement.
</li>

<li>...and we loop back to the index phase.</li>

</ul>

\section carrier_expert_header_phase The header and header reply phase

The first set of methods needed are those to create or check the 8-byte
"magic number" identifying the carrier type.  We label the methods
as INITIATOR for methods that matter on the side that initiates
a connection, and RECIPIENT for the other side.

<dl>

<dt>Carrier::getHeader (INITIATOR)</dt>

<dd>Place an 8-byte "magic number" describing the carrier in the block
of memory provided.</dd>

<dt>Carrier::checkHeader (RECIPIENT)</dt>

<dd>Check whether the "magic number" passed describes your carrier.</dd>

<dt>Carrier::setParameters (RECIPIENT)</dt>

<dd>Configure the carrier based on parameters that might be 
embedded within the "magic number" passed.  You can assume that
the Carrier::checkHeader test has already succeeded.  For carriers
with no variants, this method will do nothing.
</dd>

</dl>

Now we need to set up a series of callbacks which are invoked 
during the header and header reply phases.

<dl>

<dt>Carrier::prepareSend (INITIATOR)</dt>

<dd>Called just before we start writing on a connection. It is fine
to do nothing here, this method is not really needed and is there
for historical reasons.</dd>

<dt>Carrier::sendHeader (INITIATOR)</dt>

<dd>Finally, we send some data!
This method should first send the 8 bytes determined by Carrier::getHeader.
The "proto" object you are passed has an OutputStream object accessible
as Protocol::os() upon which you can write (you are
passed a protocol object as an argument in this
and most other callbacks).  Be sure to flush after writing
these 8 bytes.  After that, you're free to send anything else you feel
you need to.  You should definitely pass the name of the originating port, 
if there is one, so that the recipient knows who it is talking to.
You can get that information from proto.getRoute().getFromName()
(Protocol::getRoute(), Route::getFromName()).
</dd>

<dt>Carrier::expectSenderSpecifier (RECIPIENT)</dt>

<dd>
On the receiving side, the first 8 bytes are received by YARP
and used to set up your carrier (via Carrier::checkHeader and
Carrier::setParameters).  After that is done, the
Carrier::expectSenderSpecifier is called.  Your job is to pick up
the name of the originating port, however you chose to send it in
Carrier::sendHeader, and then inform YARP about it by
calling proto.setRoute(proto.getRoute().addFromName(PORT_NAME)).
You have access to an InputStream as proto.is()
[SIDE NOTE: yes, the API between Carrier and Protocol is a bit
cumbersome and over-exposes the implementation.  Sorry!]
</dd>

<dt>Carrier::expectExtraHeader (RECIPIENT)</dt>

<dd>
Called after Carrier::expectSenderSpecifier.  You can process
more header information here if there is any.
</dd>

<dt>Carrier::respondToHeader (RECIPIENT)</dt>

<dd>
An opportunity to send data back to the initiator, if needed.
Use the proto.os() stream.  Fine to do nothing.
</dd>

<dt>Carrier::expectReplyToHeader (INITIATOR)</dt>

<dd>
If the recipient does Carrier::respondToHeader, the initiator
needs to read that data here.  Further rounds of handshaking are
possible, but not formalized with callbacks - just do matching read/write
sequences in Carrier::respondToHeader and Carrier::expectReplyToHeader.
</dd>

</dl>

Okay!  We are all set up!

[MORE TO COME]

*/

