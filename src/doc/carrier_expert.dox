
/** 
 * @page carrier_expert Creating carriers for new kinds of connections

\author Paul Fitzpatrick

In YARP, ports talk to each other via connections.  Types of connections
are called "carriers".  See \ref carrier_config for information about
how to configure connections using existing carriers.  Here, we are going
to look at creating new kinds of carriers.  Why might you want to do this?

 \li You need to use a kind of network that YARP doesn't 
     currently support.  For example, we don't currently have
     support for QNX message passing.

 \li You don't like some aspect of YARP's current carriers.  No problem,
     just make your own variation and plug it in.  (Please call it a 
     different name though so as not to destroy the possibility of
     interoperation).  If it works well, please consider telling us 
     about it.

 \li You want to support direct interoperation with your middleware.

\section carrier_expert_preliminaries Coding preliminaries

The implementation of carriers is in the namespace yarp::os::impl,
rather than the regular namespace yarp::os.  Be warned that classes in
the yarp::os::impl ("implementation") namespace may change more from
release to release than those in yarp::os (intended to be a stable
user API).

Header files for implementation classes may have dependencies on 
header files from the ACE library.  This means that you need
to take some care to make sure that the ACE header files on your
system match those used to compile YARP.  If you are having trouble,
search for the "ACE4YARP" package and try using that
(see http://eris.liralab.it/wiki/ACE4YARP for details).

\section carrier_expert_classes Important classes

You should skim the documentation of the following classes:

 \li yarp::os::impl::Carrier
 \li yarp::os::impl::Carriers

You'll be able to include them in your code as follows:

\code
#include <yarp/os/impl/Carrier.h>
#include <yarp/os/impl/Carriers.h>
using namespace yarp::os::impl;
\endcode

\section carrier_expert_example An example

Here is a example that takes an existing carrier, the \ref carrier_config_text "ordinary text-mode carrier", and modifies it slightly (see example/carrier/carrier_stub.cpp):

\include example/carrier/carrier_stub.cpp

The key steps are:

 \li We create a new class for our new carrier, by subclassing something descended from yarp::os::impl::Carrier (in this case yarp::os::impl::TextCarrier).

 \li We make whatever customizations we want to that carrier.  It is very
 important to override the "factory" method Carrier::create to return
 an instance of our new class.  We also define the name associated with
 our class by overriding Carrier::getName.

 \li At the start of our program, we register an instance of that class 
 in a call to Carriers::addCarrierPrototype.

Having taken those steps, we can make connections using our new carrier
(called "test" in the example code):

\code
Network::connect(...,...,"test");
\endcode

To make connections of this type from the command line with the 
\ref yarp "yarp companion" (the "yarp" command), you need to insert your 
carrier in the YARP library, or else compile a customized version of 
the companion.  Here is the companion's source code in its entirety:

\code
#include <yarp/os/Network.h>
using namespace yarp::os;
int main(int argc, char *argv[]) {
    Network yarp;
    return Network::main(argc,argv);
}
\endcode

So there isn't much to it to just insert a call to 
Carriers::addCarrierPrototype in there.  Otherwise, to put
the new carrier in the YARP library proper, do a little pattern-matching
in the constructor for the yarp::os::impl::Carriers class
at src/libYARP_OS/src/Carriers.cpp.



*/

