
/*
 * Copyright (C) 2010 RobotCub Consortium
 * CopyPolicy: Released under the terms of the GNU GPL v2.0.
 *
 */

/** 
 * @page yarp_config_files YARP config files

\author Paul Fitzpatrick

This tutorial covers how to write and read config files 
in YARP's native format.

In summary, YARP uses a variant
of <a href="http://en.wikipedia.org/wiki/INI_file">INI files</a>,
without the "=" signs (unless \ref yarp_config_file_equals "you really want them").


\section yarp_config_file_basics The basics

YARP config files translate into yarp::os::Property objects, using
the yarp::os::Property::fromConfigFile command.

Suppose we have a file called config.ini containing:
\code
width 10
height 15
\endcode
And we do the following in code:
\code
#include <yarp/os/Property.h>
...
yarp::os::Property prop;
prop.fromConfigFile("config.ini");
\endcode
then the Property object will end up being the mapping
{width => 10, height => 15}.
In other words:
\code
prop.find("width").asInt() // gives 10
prop.find("height").asInt() // gives 15
\endcode
Lines of the form "[NAME]" will result in nested subproperties.
For example, for a file containing:
\code
[SIZE]
width 10
height 15
[APPEARANCE]
color red
\endcode
the Property object will now contain the mapping
{SIZE => {width=>10, height=>15}, APPEARANCE => {color=>red}}".
In other words:
\code
prop.findGroup("SIZE").find("width").asInt() // gives 10
prop.findGroup("APPEARANCE").find("color").asString() // gives red
\endcode

\section yarp_config_file_nesting Nesting configuration files

It is possible to nest configuration files.  To include
the configuration file "preamble.ini" inside another one, 
do:
\code
[include "preamble.ini"]
\endcode
This will insert the content of preamble.ini as if cut-and-pasted.
If you would rather have the content included within a subsection
called FOO, do instead:
\code
[include FOO "preamble.ini"]
\endcode

\section yarp_config_file_lists Section lists

Occasionally a config file needs a list of sections containing
similar entries.  One convenient way to achieve that is with
a "section prefix".  For example:
\code
[camera left]
geom 0.7 0.3
color_correct 0.01 0.0 -0.1
[camera right]
geom -0.7 0.3
color_correct 0.0 0.0 0.0
\endcode

This configuration file is equivalent to:

\code
camera left right
[left]
geom 0.7 0.3
color_correct 0.01 0.0 -0.1
[right]
geom -0.7 0.3
color_correct 0.0 0.0 0.0
\endcode

So we have a handy "camera" list that gives us the names of the 
camera-related groups.

This syntax is limited, though.  For subsections of this kind,
consider using \ref yarp_config_file_nesting "nested configuration files".

\section yarp_config_file_equals Compatibility with other INI readers

Occasionally it is nice to be able to read YARP config files from
other systems (e.g. Python has an INI reader).  Your best bet to
do that is to include an equals sign between keys and values, with
spaces around the equals.  YARP will accept and ignore this, and
it will make other readers happier.  For YARP, these two lines are
equivalent:
\code
x 10
x = 10
\encode
Don't forget the spaces though!

\section yarp_config_file_comments Comments in config files

Use the # character, or //, as your prefer.
\code
# this is a comment
// this is also a comment
\endcode

\section yarp_config_file_quoting Quoting in config files

Keys, values, and section
names containing spaces or special characters
should be surrounded by double-quotes, for example:
\code
"a long key whose string value looks like a list" "(1 2 3)"
\endcode
maps the string "a long key whose string value looks like a list" to the
string "(1 2 3)".

If the quote character needs to be included in a string it
can be itself quoted by preceding it with a backslash character.

\section yarp_config_file_continue Continuing across lines

A long line can be continued on the next line by breaking the
line up with a backslash character directly before the end of line.
For example:
\code
encoders (1 2 3 4 \
5 6 7 8)
\endcode
is the same as:
\code
encoders (1 2 3 4 5 6 7 8)
\endcode

\section yarp_config_file_find find versus findGroup

The yarp::os::Property::fromConfigFile has two main commands for
accessing information from a configuration file: find, and findGroup.

Normally, you use yarp::os::Property::findGroup to access a section by
its name, and then yarp::os::Property::find to access a value by
its key.

Sections are really just a special syntax for lists.  For 
example:
\code
[SIZE]
width 10
height 15
[APPEARANCE]
color red
\endcode
is the same as writing:
\code
SIZE (width 10) (height 15)
APPEARANCE (color red)
\endcode

[The list syntax for config files is that of yarp::os::Bottle.  Items
are separated by spaces, nested lists are surrounded by regular
parentheses, and binary blobs are represented as lists of numbers
surrounded by square parentheses.  Any level of nesting is permitted]

Likewise, every line of
a configuration file can be interpreted as a list.  For example,
the line:
\code
key val1 val2 val3
\endcode
is a list with four elements ("key", "val1", "val2", "val3").
Calling prop.findGroup("key") will return that list of four elements.
Calling prop.find("key") only really makes sense for single-valued
cases; it returns the second element of any list.
For this case, it would return "val1", which is not very
helpful.  Unless you have a specific reason not to,
it is generally better to write lists like this:
\code
key (val1 val2 val3)
\endcode
Then prop.find("key") returns ("val1","val2","val3") as would be
expected.


 *
 */

