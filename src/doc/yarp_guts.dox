/** 
 * @page yarp_guts A trip through the guts of YARP

@author Paul Fitzpatrick

This is a boring, mind-numbing tutorial full of information
most folks will never need.  Enjoy!

The goal of the tutorial is to help people find their way
around the internals of the YARP implementation.

@section yarp_guts_summary Summary of important classes

For every port, there is a yarp::os::impl::PortCore object.

For every connection between two ports, there is a 
yarp::os::impl::PortCoreOutputUnit held in a list by the
source port's PortCore, and a yarp::os::impl::PortCoreInputUnit held in
a list by the output port's PortCore.

Every PortCoreUnit has a yarp::os::impl::Protocol object that
manages the details of YARP's network protocol.

The Protocol object uses a yarp::os::impl::Carrier object
(yarp::os::impl::TcpCarrier, yarp::os::impl::McastCarrier, ...) to 
manage the peculiarities of particular connection types.


@section yarp_guts_create Port creation

Every yarp::os::Port or yarp::os::BufferedPort contains exactly one
yarp::os::impl::PortCore object. This is the main coordinator for
communication.  Every yarp::os::impl::PortCore, on start-up, initiates
one yarp::os::impl::Face object.  This object is currently always
of type yarp::os::impl::TcpFace, which represents a server socket.

The PortCore creates a thread to listen to the Face (the server socket).
Any initial communication with the port is made via the Face.

The PortCore maintains a list of yarp::os::impl::PortCoreUnit objects.
These represent incoming and outgoing connections.  When a request is
received via the Face to connect to some other port, the first
step is to create a new PortCoreUnit (either a 
yarp::os::impl::PortCoreInputUnit or a yarp::os::impl::PortCoreOutputUnit).
Depending on the configuration of the port, a new thread may be created
to service that unit.  Inputs always get a new thread.  Outputs get
a new thread only if requested (see yarp::os::Port::enableBackgroundWrite;
this is called for BufferedPorts by default).

@section yarp_guts_connect Connection creation

When the Face object receives a communication from the outside world, 
it wraps it in a Protocol object.  Concretely, this means that the TcpFace 
server socket takes each socket it receives and gives it to the PortCore
as a Protocol object, which then creates a PortCoreUnit to manage
that Protocol object.  The abstraction is important here because
one of the first steps of the YARP network protocol allows connections
to switch from whatever the carrier used to establish
the connection is (TCP) to something different for transmitting
payloads (multicast, shared memory, etc).
The Protocol object is either
yarp::os::impl::InputProtocol or yarp::os::impl::OutputProtocol
(in fact both of these are interfaces implemented by a single 
class, yarp::os::impl::Protocol, but most of YARP does not know that).

The Protocol object deals with switching to a particular carrier
(implemented by sub-types of yarp::os::impl::Carrier), and
the details of the YARP network protocol.

*
*/
