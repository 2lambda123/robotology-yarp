// -*- mode:C++; tab-width:4; c-basic-offset:4; indent-tabs-mode:nil -*-

#include <yarp/dev/Drivers.h>
#include <yarp/String.h>
#include <yarp/Logger.h>
#include <yarp/os/Bottle.h>

#include <ace/OS.h>

using namespace yarp;
using namespace yarp::os;
using namespace yarp::dev;



// this is an automatically configured file
#cmakedefine ENABLE_dragonfly

// add header file here, and factory code below
#ifdef ENABLE_dragonfly
#include <yarp/DragonflyDeviceDriver.h>
#endif


extern DeviceDriver *createRemoteFrameGrabber();
extern DeviceDriver *createServerFrameGrabber();
extern DeviceDriver *createTestFrameGrabber();

DeviceDriver *Drivers::create(yarp::os::Property& prop) {
    String str = prop.get("device").asString().c_str();
    Bottle bot(str.c_str());
    if (bot.size()>1) {
        // this wasn't a device name, but some codes -- rearrange
        prop.fromString(str.c_str());
        str = prop.get("device").asString().c_str();
    }

    DeviceDriver *driver = NULL;

#ifdef ENABLE_dragonfly
    if (str == "dragonfly") {
        driver = new DragonflyDeviceDriver();
    }
#endif

    if (str == "remote_framegrabber") {
        driver = createRemoteFrameGrabber();
    }


    if (str == "server_framegrabber") {
        driver = createServerFrameGrabber();
    }

    if (str == "test_framegrabber") {
        driver = createTestFrameGrabber();
    }

    if (driver!=NULL) {
        bool ok = driver->open(prop);
        if (!ok) {
            delete driver;
            driver = NULL;
        }
        return driver;
    }
    
    return NULL;
}

