/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_IMAP2DMSGSRPC_H
#define YARP_THRIFT_GENERATOR_SERVICE_IMAP2DMSGSRPC_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <return_getAllAreas.h>
#include <return_getAllLocations.h>
#include <return_getAllPaths.h>
#include <return_getArea.h>
#include <return_getAreasList.h>
#include <return_getLocation.h>
#include <return_getLocationsList.h>
#include <return_getMap.h>
#include <return_getMapNames.h>
#include <return_getPath.h>
#include <return_getPathsList.h>
#include <yarp/dev/Map2DArea.h>
#include <yarp/dev/Map2DLocation.h>
#include <yarp/dev/Map2DPath.h>
#include <yarp/dev/MapGrid2D.h>

class IMap2DMsgsRPC :
        public yarp::os::Wire
{
public:
    // Constructor
    IMap2DMsgsRPC();

    virtual bool clearAllMapsRPC();

    virtual bool store_mapRPC(const yarp::dev::Nav2D::MapGrid2D& themap);

    virtual return_getMap getMapRPC(const std::string& map_name);

    virtual return_getMapNames getMapNamesRPC();

    virtual bool remove_mapRPC(const std::string& map_name);

    virtual bool storeLocationRPC(const std::string& location_name, const yarp::dev::Nav2D::Map2DLocation& loc);

    virtual bool storeAreaRPC(const std::string& area_name, const yarp::dev::Nav2D::Map2DArea& area);

    virtual bool storePathRPC(const std::string& path_name, const yarp::dev::Nav2D::Map2DPath& path);

    virtual return_getLocation getLocationRPC(const std::string& location_name);

    virtual return_getArea getAreaRPC(const std::string& area_name);

    virtual return_getPath getPathRPC(const std::string& path_name);

    virtual return_getLocationsList getLocationsListRPC();

    virtual return_getAreasList getAreasListRPC();

    virtual return_getPathsList getPathsListRPC();

    virtual return_getAllLocations getAllLocationsRPC();

    virtual return_getAllAreas getAllAreasRPC();

    virtual return_getAllPaths getAllPathsRPC();

    virtual bool renameLocationRPC(const std::string& original_name, const std::string& new_name);

    virtual bool deleteLocationRPC(const std::string& location_name);

    virtual bool deletePathRPC(const std::string& path_name);

    virtual bool renameAreaRPC(const std::string& original_name, const std::string& new_name);

    virtual bool renamePathRPC(const std::string& original_name, const std::string& new_name);

    virtual bool deleteAreaRPC(const std::string& area_name);

    virtual bool clearAllLocationsRPC();

    virtual bool clearAllAreasRPC();

    virtual bool clearAllPathsRPC();

    virtual bool clearAllMapsTemporaryFlagsRPC();

    virtual bool clearMapTemporaryFlagsRPC(const std::string& map_name);

    virtual bool saveMapsCollectionRPC(const std::string& maps_collection_file);

    virtual bool loadMapsCollectionRPC(const std::string& maps_collection_file);

    virtual bool saveLocationsAndExtrasRPC(const std::string& locations_collection_file);

    virtual bool loadLocationsAndExtrasRPC(const std::string& locations_collection_file);

    virtual bool saveMapToDiskRPC(const std::string& map_name, const std::string& file_name);

    virtual bool loadMapFromDiskRPC(const std::string& file_name);

    virtual bool enableMapsCompressionRPC(const bool enable_compression);

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_IMAP2DMSGSRPC_H
