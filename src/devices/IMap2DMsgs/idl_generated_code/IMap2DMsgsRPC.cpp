/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <IMap2DMsgsRPC.h>

#include <yarp/os/idl/WireTypes.h>

class IMap2DMsgsRPC_clearAllMapsRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_clearAllMapsRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_clearAllMapsRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_clearAllMapsRPC_helper::IMap2DMsgsRPC_clearAllMapsRPC_helper()
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_clearAllMapsRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("clearAllMapsRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_clearAllMapsRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_store_mapRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_store_mapRPC_helper(const yarp::dev::Nav2D::MapGrid2D& themap);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    yarp::dev::Nav2D::MapGrid2D m_themap;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_store_mapRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_store_mapRPC_helper::IMap2DMsgsRPC_store_mapRPC_helper(const yarp::dev::Nav2D::MapGrid2D& themap) :
        m_themap{themap}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_store_mapRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("store_mapRPC", 1, 2)) {
        return false;
    }
    if (!writer.write(m_themap)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_store_mapRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_getMapRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_getMapRPC_helper(const std::string& map_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_map_name;

    thread_local static return_getMap s_return_helper;
};

thread_local return_getMap IMap2DMsgsRPC_getMapRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_getMapRPC_helper::IMap2DMsgsRPC_getMapRPC_helper(const std::string& map_name) :
        m_map_name{map_name}
{
}

bool IMap2DMsgsRPC_getMapRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("getMapRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_map_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_getMapRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_getMapNamesRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_getMapNamesRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_getMapNames s_return_helper;
};

thread_local return_getMapNames IMap2DMsgsRPC_getMapNamesRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_getMapNamesRPC_helper::IMap2DMsgsRPC_getMapNamesRPC_helper()
{
}

bool IMap2DMsgsRPC_getMapNamesRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getMapNamesRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_getMapNamesRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_remove_mapRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_remove_mapRPC_helper(const std::string& map_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_map_name;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_remove_mapRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_remove_mapRPC_helper::IMap2DMsgsRPC_remove_mapRPC_helper(const std::string& map_name) :
        m_map_name{map_name}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_remove_mapRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("remove_mapRPC", 1, 2)) {
        return false;
    }
    if (!writer.writeString(m_map_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_remove_mapRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_storeLocationRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_storeLocationRPC_helper(const std::string& location_name, const yarp::dev::Nav2D::Map2DLocation& loc);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_location_name;
    yarp::dev::Nav2D::Map2DLocation m_loc;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_storeLocationRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_storeLocationRPC_helper::IMap2DMsgsRPC_storeLocationRPC_helper(const std::string& location_name, const yarp::dev::Nav2D::Map2DLocation& loc) :
        m_location_name{location_name},
        m_loc{loc}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_storeLocationRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("storeLocationRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_location_name)) {
        return false;
    }
    if (!writer.write(m_loc)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_storeLocationRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_storeAreaRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_storeAreaRPC_helper(const std::string& area_name, const yarp::dev::Nav2D::Map2DArea& area);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_area_name;
    yarp::dev::Nav2D::Map2DArea m_area;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_storeAreaRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_storeAreaRPC_helper::IMap2DMsgsRPC_storeAreaRPC_helper(const std::string& area_name, const yarp::dev::Nav2D::Map2DArea& area) :
        m_area_name{area_name},
        m_area{area}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_storeAreaRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("storeAreaRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_area_name)) {
        return false;
    }
    if (!writer.write(m_area)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_storeAreaRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_storePathRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_storePathRPC_helper(const std::string& path_name, const yarp::dev::Nav2D::Map2DPath& path);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_path_name;
    yarp::dev::Nav2D::Map2DPath m_path;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_storePathRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_storePathRPC_helper::IMap2DMsgsRPC_storePathRPC_helper(const std::string& path_name, const yarp::dev::Nav2D::Map2DPath& path) :
        m_path_name{path_name},
        m_path{path}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_storePathRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("storePathRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_path_name)) {
        return false;
    }
    if (!writer.write(m_path)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_storePathRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_getLocationRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_getLocationRPC_helper(const std::string& location_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_location_name;

    thread_local static return_getLocation s_return_helper;
};

thread_local return_getLocation IMap2DMsgsRPC_getLocationRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_getLocationRPC_helper::IMap2DMsgsRPC_getLocationRPC_helper(const std::string& location_name) :
        m_location_name{location_name}
{
}

bool IMap2DMsgsRPC_getLocationRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("getLocationRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_location_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_getLocationRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_getAreaRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_getAreaRPC_helper(const std::string& area_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_area_name;

    thread_local static return_getArea s_return_helper;
};

thread_local return_getArea IMap2DMsgsRPC_getAreaRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_getAreaRPC_helper::IMap2DMsgsRPC_getAreaRPC_helper(const std::string& area_name) :
        m_area_name{area_name}
{
}

bool IMap2DMsgsRPC_getAreaRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("getAreaRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_area_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_getAreaRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_getPathRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_getPathRPC_helper(const std::string& path_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_path_name;

    thread_local static return_getPath s_return_helper;
};

thread_local return_getPath IMap2DMsgsRPC_getPathRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_getPathRPC_helper::IMap2DMsgsRPC_getPathRPC_helper(const std::string& path_name) :
        m_path_name{path_name}
{
}

bool IMap2DMsgsRPC_getPathRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("getPathRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_path_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_getPathRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_getLocationsListRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_getLocationsListRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_getLocationsList s_return_helper;
};

thread_local return_getLocationsList IMap2DMsgsRPC_getLocationsListRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_getLocationsListRPC_helper::IMap2DMsgsRPC_getLocationsListRPC_helper()
{
}

bool IMap2DMsgsRPC_getLocationsListRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getLocationsListRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_getLocationsListRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_getAreasListRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_getAreasListRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_getAreasList s_return_helper;
};

thread_local return_getAreasList IMap2DMsgsRPC_getAreasListRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_getAreasListRPC_helper::IMap2DMsgsRPC_getAreasListRPC_helper()
{
}

bool IMap2DMsgsRPC_getAreasListRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getAreasListRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_getAreasListRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_getPathsListRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_getPathsListRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_getPathsList s_return_helper;
};

thread_local return_getPathsList IMap2DMsgsRPC_getPathsListRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_getPathsListRPC_helper::IMap2DMsgsRPC_getPathsListRPC_helper()
{
}

bool IMap2DMsgsRPC_getPathsListRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getPathsListRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_getPathsListRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_renameLocationRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_renameLocationRPC_helper(const std::string& original_name, const std::string& new_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_original_name;
    std::string m_new_name;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_renameLocationRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_renameLocationRPC_helper::IMap2DMsgsRPC_renameLocationRPC_helper(const std::string& original_name, const std::string& new_name) :
        m_original_name{original_name},
        m_new_name{new_name}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_renameLocationRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("renameLocationRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_original_name)) {
        return false;
    }
    if (!writer.writeString(m_new_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_renameLocationRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_deleteLocationRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_deleteLocationRPC_helper(const std::string& location_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_location_name;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_deleteLocationRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_deleteLocationRPC_helper::IMap2DMsgsRPC_deleteLocationRPC_helper(const std::string& location_name) :
        m_location_name{location_name}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_deleteLocationRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("deleteLocationRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_location_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_deleteLocationRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_deletePathRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_deletePathRPC_helper(const std::string& path_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_path_name;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_deletePathRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_deletePathRPC_helper::IMap2DMsgsRPC_deletePathRPC_helper(const std::string& path_name) :
        m_path_name{path_name}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_deletePathRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("deletePathRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_path_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_deletePathRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_renameAreaRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_renameAreaRPC_helper(const std::string& original_name, const std::string& new_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_original_name;
    std::string m_new_name;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_renameAreaRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_renameAreaRPC_helper::IMap2DMsgsRPC_renameAreaRPC_helper(const std::string& original_name, const std::string& new_name) :
        m_original_name{original_name},
        m_new_name{new_name}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_renameAreaRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("renameAreaRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_original_name)) {
        return false;
    }
    if (!writer.writeString(m_new_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_renameAreaRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_renamePathRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_renamePathRPC_helper(const std::string& original_name, const std::string& new_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_original_name;
    std::string m_new_name;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_renamePathRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_renamePathRPC_helper::IMap2DMsgsRPC_renamePathRPC_helper(const std::string& original_name, const std::string& new_name) :
        m_original_name{original_name},
        m_new_name{new_name}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_renamePathRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("renamePathRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_original_name)) {
        return false;
    }
    if (!writer.writeString(m_new_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_renamePathRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_deleteAreaRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_deleteAreaRPC_helper(const std::string& area_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_area_name;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_deleteAreaRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_deleteAreaRPC_helper::IMap2DMsgsRPC_deleteAreaRPC_helper(const std::string& area_name) :
        m_area_name{area_name}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_deleteAreaRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("deleteAreaRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_area_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_deleteAreaRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_clearAllLocationsRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_clearAllLocationsRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_clearAllLocationsRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_clearAllLocationsRPC_helper::IMap2DMsgsRPC_clearAllLocationsRPC_helper()
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_clearAllLocationsRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("clearAllLocationsRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_clearAllLocationsRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_clearAllAreasRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_clearAllAreasRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_clearAllAreasRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_clearAllAreasRPC_helper::IMap2DMsgsRPC_clearAllAreasRPC_helper()
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_clearAllAreasRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("clearAllAreasRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_clearAllAreasRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_clearAllPathsRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_clearAllPathsRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_clearAllPathsRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_clearAllPathsRPC_helper::IMap2DMsgsRPC_clearAllPathsRPC_helper()
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_clearAllPathsRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("clearAllPathsRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_clearAllPathsRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper::IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper()
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("clearAllMapsTemporaryFlagsRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper(const std::string& map_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_map_name;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper::IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper(const std::string& map_name) :
        m_map_name{map_name}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("clearMapTemporaryFlagsRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_map_name)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_saveMapsCollectionRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_saveMapsCollectionRPC_helper(const std::string& maps_collection_file);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_maps_collection_file;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_saveMapsCollectionRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_saveMapsCollectionRPC_helper::IMap2DMsgsRPC_saveMapsCollectionRPC_helper(const std::string& maps_collection_file) :
        m_maps_collection_file{maps_collection_file}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_saveMapsCollectionRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("saveMapsCollectionRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_maps_collection_file)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_saveMapsCollectionRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_loadMapsCollectionRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_loadMapsCollectionRPC_helper(const std::string& maps_collection_file);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_maps_collection_file;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_loadMapsCollectionRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_loadMapsCollectionRPC_helper::IMap2DMsgsRPC_loadMapsCollectionRPC_helper(const std::string& maps_collection_file) :
        m_maps_collection_file{maps_collection_file}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_loadMapsCollectionRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("loadMapsCollectionRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_maps_collection_file)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_loadMapsCollectionRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper(const std::string& locations_collection_file);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_locations_collection_file;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper::IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper(const std::string& locations_collection_file) :
        m_locations_collection_file{locations_collection_file}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("saveLocationsAndExtrasRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_locations_collection_file)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper :
        public yarp::os::Portable
{
public:
    explicit IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper(const std::string& locations_collection_file);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_locations_collection_file;

    thread_local static bool s_return_helper;
};

thread_local bool IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper::s_return_helper = {};

IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper::IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper(const std::string& locations_collection_file) :
        m_locations_collection_file{locations_collection_file}
{
    s_return_helper = {};
}

bool IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("loadLocationsAndExtrasRPC", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_locations_collection_file)) {
        return false;
    }
    return true;
}

bool IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
IMap2DMsgsRPC::IMap2DMsgsRPC()
{
    yarp().setOwner(*this);
}

bool IMap2DMsgsRPC::clearAllMapsRPC()
{
    IMap2DMsgsRPC_clearAllMapsRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::clearAllMapsRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_clearAllMapsRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::store_mapRPC(const yarp::dev::Nav2D::MapGrid2D& themap)
{
    IMap2DMsgsRPC_store_mapRPC_helper helper{themap};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::store_mapRPC(const yarp::dev::Nav2D::MapGrid2D& themap)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_store_mapRPC_helper::s_return_helper : bool{};
}

return_getMap IMap2DMsgsRPC::getMapRPC(const std::string& map_name)
{
    IMap2DMsgsRPC_getMapRPC_helper helper{map_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getMap IMap2DMsgsRPC::getMapRPC(const std::string& map_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_getMapRPC_helper::s_return_helper : return_getMap{};
}

return_getMapNames IMap2DMsgsRPC::getMapNamesRPC()
{
    IMap2DMsgsRPC_getMapNamesRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getMapNames IMap2DMsgsRPC::getMapNamesRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_getMapNamesRPC_helper::s_return_helper : return_getMapNames{};
}

bool IMap2DMsgsRPC::remove_mapRPC(const std::string& map_name)
{
    IMap2DMsgsRPC_remove_mapRPC_helper helper{map_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::remove_mapRPC(const std::string& map_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_remove_mapRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::storeLocationRPC(const std::string& location_name, const yarp::dev::Nav2D::Map2DLocation& loc)
{
    IMap2DMsgsRPC_storeLocationRPC_helper helper{location_name, loc};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::storeLocationRPC(const std::string& location_name, const yarp::dev::Nav2D::Map2DLocation& loc)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_storeLocationRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::storeAreaRPC(const std::string& area_name, const yarp::dev::Nav2D::Map2DArea& area)
{
    IMap2DMsgsRPC_storeAreaRPC_helper helper{area_name, area};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::storeAreaRPC(const std::string& area_name, const yarp::dev::Nav2D::Map2DArea& area)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_storeAreaRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::storePathRPC(const std::string& path_name, const yarp::dev::Nav2D::Map2DPath& path)
{
    IMap2DMsgsRPC_storePathRPC_helper helper{path_name, path};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::storePathRPC(const std::string& path_name, const yarp::dev::Nav2D::Map2DPath& path)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_storePathRPC_helper::s_return_helper : bool{};
}

return_getLocation IMap2DMsgsRPC::getLocationRPC(const std::string& location_name)
{
    IMap2DMsgsRPC_getLocationRPC_helper helper{location_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getLocation IMap2DMsgsRPC::getLocationRPC(const std::string& location_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_getLocationRPC_helper::s_return_helper : return_getLocation{};
}

return_getArea IMap2DMsgsRPC::getAreaRPC(const std::string& area_name)
{
    IMap2DMsgsRPC_getAreaRPC_helper helper{area_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getArea IMap2DMsgsRPC::getAreaRPC(const std::string& area_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_getAreaRPC_helper::s_return_helper : return_getArea{};
}

return_getPath IMap2DMsgsRPC::getPathRPC(const std::string& path_name)
{
    IMap2DMsgsRPC_getPathRPC_helper helper{path_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getPath IMap2DMsgsRPC::getPathRPC(const std::string& path_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_getPathRPC_helper::s_return_helper : return_getPath{};
}

return_getLocationsList IMap2DMsgsRPC::getLocationsListRPC()
{
    IMap2DMsgsRPC_getLocationsListRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getLocationsList IMap2DMsgsRPC::getLocationsListRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_getLocationsListRPC_helper::s_return_helper : return_getLocationsList{};
}

return_getAreasList IMap2DMsgsRPC::getAreasListRPC()
{
    IMap2DMsgsRPC_getAreasListRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getAreasList IMap2DMsgsRPC::getAreasListRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_getAreasListRPC_helper::s_return_helper : return_getAreasList{};
}

return_getPathsList IMap2DMsgsRPC::getPathsListRPC()
{
    IMap2DMsgsRPC_getPathsListRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getPathsList IMap2DMsgsRPC::getPathsListRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_getPathsListRPC_helper::s_return_helper : return_getPathsList{};
}

bool IMap2DMsgsRPC::renameLocationRPC(const std::string& original_name, const std::string& new_name)
{
    IMap2DMsgsRPC_renameLocationRPC_helper helper{original_name, new_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::renameLocationRPC(const std::string& original_name, const std::string& new_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_renameLocationRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::deleteLocationRPC(const std::string& location_name)
{
    IMap2DMsgsRPC_deleteLocationRPC_helper helper{location_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::deleteLocationRPC(const std::string& location_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_deleteLocationRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::deletePathRPC(const std::string& path_name)
{
    IMap2DMsgsRPC_deletePathRPC_helper helper{path_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::deletePathRPC(const std::string& path_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_deletePathRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::renameAreaRPC(const std::string& original_name, const std::string& new_name)
{
    IMap2DMsgsRPC_renameAreaRPC_helper helper{original_name, new_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::renameAreaRPC(const std::string& original_name, const std::string& new_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_renameAreaRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::renamePathRPC(const std::string& original_name, const std::string& new_name)
{
    IMap2DMsgsRPC_renamePathRPC_helper helper{original_name, new_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::renamePathRPC(const std::string& original_name, const std::string& new_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_renamePathRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::deleteAreaRPC(const std::string& area_name)
{
    IMap2DMsgsRPC_deleteAreaRPC_helper helper{area_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::deleteAreaRPC(const std::string& area_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_deleteAreaRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::clearAllLocationsRPC()
{
    IMap2DMsgsRPC_clearAllLocationsRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::clearAllLocationsRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_clearAllLocationsRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::clearAllAreasRPC()
{
    IMap2DMsgsRPC_clearAllAreasRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::clearAllAreasRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_clearAllAreasRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::clearAllPathsRPC()
{
    IMap2DMsgsRPC_clearAllPathsRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::clearAllPathsRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_clearAllPathsRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::clearAllMapsTemporaryFlagsRPC()
{
    IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::clearAllMapsTemporaryFlagsRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::clearMapTemporaryFlagsRPC(const std::string& map_name)
{
    IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper helper{map_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::clearMapTemporaryFlagsRPC(const std::string& map_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::saveMapsCollectionRPC(const std::string& maps_collection_file)
{
    IMap2DMsgsRPC_saveMapsCollectionRPC_helper helper{maps_collection_file};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::saveMapsCollectionRPC(const std::string& maps_collection_file)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_saveMapsCollectionRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::loadMapsCollectionRPC(const std::string& maps_collection_file)
{
    IMap2DMsgsRPC_loadMapsCollectionRPC_helper helper{maps_collection_file};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::loadMapsCollectionRPC(const std::string& maps_collection_file)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_loadMapsCollectionRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::saveLocationsAndExtrasRPC(const std::string& locations_collection_file)
{
    IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper helper{locations_collection_file};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::saveLocationsAndExtrasRPC(const std::string& locations_collection_file)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper::s_return_helper : bool{};
}

bool IMap2DMsgsRPC::loadLocationsAndExtrasRPC(const std::string& locations_collection_file)
{
    IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper helper{locations_collection_file};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool IMap2DMsgsRPC::loadLocationsAndExtrasRPC(const std::string& locations_collection_file)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper::s_return_helper : bool{};
}

// help method
std::vector<std::string> IMap2DMsgsRPC::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("clearAllMapsRPC");
        helpString.emplace_back("store_mapRPC");
        helpString.emplace_back("getMapRPC");
        helpString.emplace_back("getMapNamesRPC");
        helpString.emplace_back("remove_mapRPC");
        helpString.emplace_back("storeLocationRPC");
        helpString.emplace_back("storeAreaRPC");
        helpString.emplace_back("storePathRPC");
        helpString.emplace_back("getLocationRPC");
        helpString.emplace_back("getAreaRPC");
        helpString.emplace_back("getPathRPC");
        helpString.emplace_back("getLocationsListRPC");
        helpString.emplace_back("getAreasListRPC");
        helpString.emplace_back("getPathsListRPC");
        helpString.emplace_back("renameLocationRPC");
        helpString.emplace_back("deleteLocationRPC");
        helpString.emplace_back("deletePathRPC");
        helpString.emplace_back("renameAreaRPC");
        helpString.emplace_back("renamePathRPC");
        helpString.emplace_back("deleteAreaRPC");
        helpString.emplace_back("clearAllLocationsRPC");
        helpString.emplace_back("clearAllAreasRPC");
        helpString.emplace_back("clearAllPathsRPC");
        helpString.emplace_back("clearAllMapsTemporaryFlagsRPC");
        helpString.emplace_back("clearMapTemporaryFlagsRPC");
        helpString.emplace_back("saveMapsCollectionRPC");
        helpString.emplace_back("loadMapsCollectionRPC");
        helpString.emplace_back("saveLocationsAndExtrasRPC");
        helpString.emplace_back("loadLocationsAndExtrasRPC");
        helpString.emplace_back("help");
    } else {
        if (functionName == "clearAllMapsRPC") {
            helpString.emplace_back("bool clearAllMapsRPC() ");
        }
        if (functionName == "store_mapRPC") {
            helpString.emplace_back("bool store_mapRPC(const yarp::dev::Nav2D::MapGrid2D& themap) ");
        }
        if (functionName == "getMapRPC") {
            helpString.emplace_back("return_getMap getMapRPC(const std::string& map_name) ");
        }
        if (functionName == "getMapNamesRPC") {
            helpString.emplace_back("return_getMapNames getMapNamesRPC() ");
        }
        if (functionName == "remove_mapRPC") {
            helpString.emplace_back("bool remove_mapRPC(const std::string& map_name) ");
        }
        if (functionName == "storeLocationRPC") {
            helpString.emplace_back("bool storeLocationRPC(const std::string& location_name, const yarp::dev::Nav2D::Map2DLocation& loc) ");
        }
        if (functionName == "storeAreaRPC") {
            helpString.emplace_back("bool storeAreaRPC(const std::string& area_name, const yarp::dev::Nav2D::Map2DArea& area) ");
        }
        if (functionName == "storePathRPC") {
            helpString.emplace_back("bool storePathRPC(const std::string& path_name, const yarp::dev::Nav2D::Map2DPath& path) ");
        }
        if (functionName == "getLocationRPC") {
            helpString.emplace_back("return_getLocation getLocationRPC(const std::string& location_name) ");
        }
        if (functionName == "getAreaRPC") {
            helpString.emplace_back("return_getArea getAreaRPC(const std::string& area_name) ");
        }
        if (functionName == "getPathRPC") {
            helpString.emplace_back("return_getPath getPathRPC(const std::string& path_name) ");
        }
        if (functionName == "getLocationsListRPC") {
            helpString.emplace_back("return_getLocationsList getLocationsListRPC() ");
        }
        if (functionName == "getAreasListRPC") {
            helpString.emplace_back("return_getAreasList getAreasListRPC() ");
        }
        if (functionName == "getPathsListRPC") {
            helpString.emplace_back("return_getPathsList getPathsListRPC() ");
        }
        if (functionName == "renameLocationRPC") {
            helpString.emplace_back("bool renameLocationRPC(const std::string& original_name, const std::string& new_name) ");
        }
        if (functionName == "deleteLocationRPC") {
            helpString.emplace_back("bool deleteLocationRPC(const std::string& location_name) ");
        }
        if (functionName == "deletePathRPC") {
            helpString.emplace_back("bool deletePathRPC(const std::string& path_name) ");
        }
        if (functionName == "renameAreaRPC") {
            helpString.emplace_back("bool renameAreaRPC(const std::string& original_name, const std::string& new_name) ");
        }
        if (functionName == "renamePathRPC") {
            helpString.emplace_back("bool renamePathRPC(const std::string& original_name, const std::string& new_name) ");
        }
        if (functionName == "deleteAreaRPC") {
            helpString.emplace_back("bool deleteAreaRPC(const std::string& area_name) ");
        }
        if (functionName == "clearAllLocationsRPC") {
            helpString.emplace_back("bool clearAllLocationsRPC() ");
        }
        if (functionName == "clearAllAreasRPC") {
            helpString.emplace_back("bool clearAllAreasRPC() ");
        }
        if (functionName == "clearAllPathsRPC") {
            helpString.emplace_back("bool clearAllPathsRPC() ");
        }
        if (functionName == "clearAllMapsTemporaryFlagsRPC") {
            helpString.emplace_back("bool clearAllMapsTemporaryFlagsRPC() ");
        }
        if (functionName == "clearMapTemporaryFlagsRPC") {
            helpString.emplace_back("bool clearMapTemporaryFlagsRPC(const std::string& map_name) ");
        }
        if (functionName == "saveMapsCollectionRPC") {
            helpString.emplace_back("bool saveMapsCollectionRPC(const std::string& maps_collection_file) ");
        }
        if (functionName == "loadMapsCollectionRPC") {
            helpString.emplace_back("bool loadMapsCollectionRPC(const std::string& maps_collection_file) ");
        }
        if (functionName == "saveLocationsAndExtrasRPC") {
            helpString.emplace_back("bool saveLocationsAndExtrasRPC(const std::string& locations_collection_file) ");
        }
        if (functionName == "loadLocationsAndExtrasRPC") {
            helpString.emplace_back("bool loadLocationsAndExtrasRPC(const std::string& locations_collection_file) ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool IMap2DMsgsRPC::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "clearAllMapsRPC") {
            IMap2DMsgsRPC_clearAllMapsRPC_helper::s_return_helper = clearAllMapsRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_clearAllMapsRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "store_mapRPC") {
            yarp::dev::Nav2D::MapGrid2D themap;
            if (!reader.read(themap)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_store_mapRPC_helper::s_return_helper = store_mapRPC(themap);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_store_mapRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getMapRPC") {
            std::string map_name;
            if (!reader.readString(map_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_getMapRPC_helper::s_return_helper = getMapRPC(map_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(IMap2DMsgsRPC_getMapRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getMapNamesRPC") {
            IMap2DMsgsRPC_getMapNamesRPC_helper::s_return_helper = getMapNamesRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(IMap2DMsgsRPC_getMapNamesRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "remove_mapRPC") {
            std::string map_name;
            if (!reader.readString(map_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_remove_mapRPC_helper::s_return_helper = remove_mapRPC(map_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_remove_mapRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "storeLocationRPC") {
            std::string location_name;
            yarp::dev::Nav2D::Map2DLocation loc;
            if (!reader.readString(location_name)) {
                reader.fail();
                return false;
            }
            if (!reader.read(loc)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_storeLocationRPC_helper::s_return_helper = storeLocationRPC(location_name, loc);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_storeLocationRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "storeAreaRPC") {
            std::string area_name;
            yarp::dev::Nav2D::Map2DArea area;
            if (!reader.readString(area_name)) {
                reader.fail();
                return false;
            }
            if (!reader.read(area)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_storeAreaRPC_helper::s_return_helper = storeAreaRPC(area_name, area);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_storeAreaRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "storePathRPC") {
            std::string path_name;
            yarp::dev::Nav2D::Map2DPath path;
            if (!reader.readString(path_name)) {
                reader.fail();
                return false;
            }
            if (!reader.read(path)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_storePathRPC_helper::s_return_helper = storePathRPC(path_name, path);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_storePathRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getLocationRPC") {
            std::string location_name;
            if (!reader.readString(location_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_getLocationRPC_helper::s_return_helper = getLocationRPC(location_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(IMap2DMsgsRPC_getLocationRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getAreaRPC") {
            std::string area_name;
            if (!reader.readString(area_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_getAreaRPC_helper::s_return_helper = getAreaRPC(area_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(IMap2DMsgsRPC_getAreaRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getPathRPC") {
            std::string path_name;
            if (!reader.readString(path_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_getPathRPC_helper::s_return_helper = getPathRPC(path_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(IMap2DMsgsRPC_getPathRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getLocationsListRPC") {
            IMap2DMsgsRPC_getLocationsListRPC_helper::s_return_helper = getLocationsListRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(IMap2DMsgsRPC_getLocationsListRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getAreasListRPC") {
            IMap2DMsgsRPC_getAreasListRPC_helper::s_return_helper = getAreasListRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(IMap2DMsgsRPC_getAreasListRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getPathsListRPC") {
            IMap2DMsgsRPC_getPathsListRPC_helper::s_return_helper = getPathsListRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(IMap2DMsgsRPC_getPathsListRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "renameLocationRPC") {
            std::string original_name;
            std::string new_name;
            if (!reader.readString(original_name)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(new_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_renameLocationRPC_helper::s_return_helper = renameLocationRPC(original_name, new_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_renameLocationRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "deleteLocationRPC") {
            std::string location_name;
            if (!reader.readString(location_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_deleteLocationRPC_helper::s_return_helper = deleteLocationRPC(location_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_deleteLocationRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "deletePathRPC") {
            std::string path_name;
            if (!reader.readString(path_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_deletePathRPC_helper::s_return_helper = deletePathRPC(path_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_deletePathRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "renameAreaRPC") {
            std::string original_name;
            std::string new_name;
            if (!reader.readString(original_name)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(new_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_renameAreaRPC_helper::s_return_helper = renameAreaRPC(original_name, new_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_renameAreaRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "renamePathRPC") {
            std::string original_name;
            std::string new_name;
            if (!reader.readString(original_name)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(new_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_renamePathRPC_helper::s_return_helper = renamePathRPC(original_name, new_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_renamePathRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "deleteAreaRPC") {
            std::string area_name;
            if (!reader.readString(area_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_deleteAreaRPC_helper::s_return_helper = deleteAreaRPC(area_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_deleteAreaRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "clearAllLocationsRPC") {
            IMap2DMsgsRPC_clearAllLocationsRPC_helper::s_return_helper = clearAllLocationsRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_clearAllLocationsRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "clearAllAreasRPC") {
            IMap2DMsgsRPC_clearAllAreasRPC_helper::s_return_helper = clearAllAreasRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_clearAllAreasRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "clearAllPathsRPC") {
            IMap2DMsgsRPC_clearAllPathsRPC_helper::s_return_helper = clearAllPathsRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_clearAllPathsRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "clearAllMapsTemporaryFlagsRPC") {
            IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper::s_return_helper = clearAllMapsTemporaryFlagsRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_clearAllMapsTemporaryFlagsRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "clearMapTemporaryFlagsRPC") {
            std::string map_name;
            if (!reader.readString(map_name)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper::s_return_helper = clearMapTemporaryFlagsRPC(map_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_clearMapTemporaryFlagsRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "saveMapsCollectionRPC") {
            std::string maps_collection_file;
            if (!reader.readString(maps_collection_file)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_saveMapsCollectionRPC_helper::s_return_helper = saveMapsCollectionRPC(maps_collection_file);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_saveMapsCollectionRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "loadMapsCollectionRPC") {
            std::string maps_collection_file;
            if (!reader.readString(maps_collection_file)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_loadMapsCollectionRPC_helper::s_return_helper = loadMapsCollectionRPC(maps_collection_file);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_loadMapsCollectionRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "saveLocationsAndExtrasRPC") {
            std::string locations_collection_file;
            if (!reader.readString(locations_collection_file)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper::s_return_helper = saveLocationsAndExtrasRPC(locations_collection_file);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_saveLocationsAndExtrasRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "loadLocationsAndExtrasRPC") {
            std::string locations_collection_file;
            if (!reader.readString(locations_collection_file)) {
                reader.fail();
                return false;
            }
            IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper::s_return_helper = loadLocationsAndExtrasRPC(locations_collection_file);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(IMap2DMsgsRPC_loadLocationsAndExtrasRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
