/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <SensorRPCData.h>

// Constructor with field values
SensorRPCData::SensorRPCData(const std::vector<SensorMetadata>& ThreeAxisGyroscopes,
                             const std::vector<SensorMetadata>& ThreeAxisLinearAccelerometers,
                             const std::vector<SensorMetadata>& ThreeAxisMagnetometers,
                             const std::vector<SensorMetadata>& OrientationSensors,
                             const std::vector<SensorMetadata>& TemperatureSensors,
                             const std::vector<SensorMetadata>& SixAxisForceTorqueSensors,
                             const std::vector<SensorMetadata>& ContactLoadCellArrays,
                             const std::vector<SensorMetadata>& EncoderArrays,
                             const std::vector<SensorMetadata>& SkinPatches,
                             const std::vector<SensorMetadata>& PositionSensors) :
        WirePortable(),
        ThreeAxisGyroscopes(ThreeAxisGyroscopes),
        ThreeAxisLinearAccelerometers(ThreeAxisLinearAccelerometers),
        ThreeAxisMagnetometers(ThreeAxisMagnetometers),
        OrientationSensors(OrientationSensors),
        TemperatureSensors(TemperatureSensors),
        SixAxisForceTorqueSensors(SixAxisForceTorqueSensors),
        ContactLoadCellArrays(ContactLoadCellArrays),
        EncoderArrays(EncoderArrays),
        SkinPatches(SkinPatches),
        PositionSensors(PositionSensors)
{
}

// Read structure on a Wire
bool SensorRPCData::read(yarp::os::idl::WireReader& reader)
{
    if (!read_ThreeAxisGyroscopes(reader)) {
        return false;
    }
    if (!read_ThreeAxisLinearAccelerometers(reader)) {
        return false;
    }
    if (!read_ThreeAxisMagnetometers(reader)) {
        return false;
    }
    if (!read_OrientationSensors(reader)) {
        return false;
    }
    if (!read_TemperatureSensors(reader)) {
        return false;
    }
    if (!read_SixAxisForceTorqueSensors(reader)) {
        return false;
    }
    if (!read_ContactLoadCellArrays(reader)) {
        return false;
    }
    if (!read_EncoderArrays(reader)) {
        return false;
    }
    if (!read_SkinPatches(reader)) {
        return false;
    }
    if (!read_PositionSensors(reader)) {
        return false;
    }
    return !reader.isError();
}

// Read structure on a Connection
bool SensorRPCData::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(10)) {
        return false;
    }
    return read(reader);
}

// Write structure on a Wire
bool SensorRPCData::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_ThreeAxisGyroscopes(writer)) {
        return false;
    }
    if (!write_ThreeAxisLinearAccelerometers(writer)) {
        return false;
    }
    if (!write_ThreeAxisMagnetometers(writer)) {
        return false;
    }
    if (!write_OrientationSensors(writer)) {
        return false;
    }
    if (!write_TemperatureSensors(writer)) {
        return false;
    }
    if (!write_SixAxisForceTorqueSensors(writer)) {
        return false;
    }
    if (!write_ContactLoadCellArrays(writer)) {
        return false;
    }
    if (!write_EncoderArrays(writer)) {
        return false;
    }
    if (!write_SkinPatches(writer)) {
        return false;
    }
    if (!write_PositionSensors(writer)) {
        return false;
    }
    return !writer.isError();
}

// Write structure on a Connection
bool SensorRPCData::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(10)) {
        return false;
    }
    return write(writer);
}

// Convert to a printable string
std::string SensorRPCData::toString() const
{
    yarp::os::Bottle b;
    b.read(*this);
    return b.toString();
}

// read ThreeAxisGyroscopes field
bool SensorRPCData::read_ThreeAxisGyroscopes(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    ThreeAxisGyroscopes.clear();
    uint32_t _size12;
    yarp::os::idl::WireState _etype15;
    reader.readListBegin(_etype15, _size12);
    ThreeAxisGyroscopes.resize(_size12);
    for (size_t _i16 = 0; _i16 < _size12; ++_i16) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(ThreeAxisGyroscopes[_i16])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write ThreeAxisGyroscopes field
bool SensorRPCData::write_ThreeAxisGyroscopes(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisGyroscopes.size()))) {
        return false;
    }
    for (const auto& _item17 : ThreeAxisGyroscopes) {
        if (!writer.writeNested(_item17)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) ThreeAxisGyroscopes field
bool SensorRPCData::nested_read_ThreeAxisGyroscopes(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    ThreeAxisGyroscopes.clear();
    uint32_t _size18;
    yarp::os::idl::WireState _etype21;
    reader.readListBegin(_etype21, _size18);
    ThreeAxisGyroscopes.resize(_size18);
    for (size_t _i22 = 0; _i22 < _size18; ++_i22) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(ThreeAxisGyroscopes[_i22])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) ThreeAxisGyroscopes field
bool SensorRPCData::nested_write_ThreeAxisGyroscopes(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisGyroscopes.size()))) {
        return false;
    }
    for (const auto& _item23 : ThreeAxisGyroscopes) {
        if (!writer.writeNested(_item23)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read ThreeAxisLinearAccelerometers field
bool SensorRPCData::read_ThreeAxisLinearAccelerometers(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    ThreeAxisLinearAccelerometers.clear();
    uint32_t _size24;
    yarp::os::idl::WireState _etype27;
    reader.readListBegin(_etype27, _size24);
    ThreeAxisLinearAccelerometers.resize(_size24);
    for (size_t _i28 = 0; _i28 < _size24; ++_i28) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(ThreeAxisLinearAccelerometers[_i28])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write ThreeAxisLinearAccelerometers field
bool SensorRPCData::write_ThreeAxisLinearAccelerometers(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisLinearAccelerometers.size()))) {
        return false;
    }
    for (const auto& _item29 : ThreeAxisLinearAccelerometers) {
        if (!writer.writeNested(_item29)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) ThreeAxisLinearAccelerometers field
bool SensorRPCData::nested_read_ThreeAxisLinearAccelerometers(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    ThreeAxisLinearAccelerometers.clear();
    uint32_t _size30;
    yarp::os::idl::WireState _etype33;
    reader.readListBegin(_etype33, _size30);
    ThreeAxisLinearAccelerometers.resize(_size30);
    for (size_t _i34 = 0; _i34 < _size30; ++_i34) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(ThreeAxisLinearAccelerometers[_i34])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) ThreeAxisLinearAccelerometers field
bool SensorRPCData::nested_write_ThreeAxisLinearAccelerometers(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisLinearAccelerometers.size()))) {
        return false;
    }
    for (const auto& _item35 : ThreeAxisLinearAccelerometers) {
        if (!writer.writeNested(_item35)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read ThreeAxisMagnetometers field
bool SensorRPCData::read_ThreeAxisMagnetometers(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    ThreeAxisMagnetometers.clear();
    uint32_t _size36;
    yarp::os::idl::WireState _etype39;
    reader.readListBegin(_etype39, _size36);
    ThreeAxisMagnetometers.resize(_size36);
    for (size_t _i40 = 0; _i40 < _size36; ++_i40) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(ThreeAxisMagnetometers[_i40])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write ThreeAxisMagnetometers field
bool SensorRPCData::write_ThreeAxisMagnetometers(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisMagnetometers.size()))) {
        return false;
    }
    for (const auto& _item41 : ThreeAxisMagnetometers) {
        if (!writer.writeNested(_item41)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) ThreeAxisMagnetometers field
bool SensorRPCData::nested_read_ThreeAxisMagnetometers(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    ThreeAxisMagnetometers.clear();
    uint32_t _size42;
    yarp::os::idl::WireState _etype45;
    reader.readListBegin(_etype45, _size42);
    ThreeAxisMagnetometers.resize(_size42);
    for (size_t _i46 = 0; _i46 < _size42; ++_i46) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(ThreeAxisMagnetometers[_i46])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) ThreeAxisMagnetometers field
bool SensorRPCData::nested_write_ThreeAxisMagnetometers(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisMagnetometers.size()))) {
        return false;
    }
    for (const auto& _item47 : ThreeAxisMagnetometers) {
        if (!writer.writeNested(_item47)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read OrientationSensors field
bool SensorRPCData::read_OrientationSensors(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    OrientationSensors.clear();
    uint32_t _size48;
    yarp::os::idl::WireState _etype51;
    reader.readListBegin(_etype51, _size48);
    OrientationSensors.resize(_size48);
    for (size_t _i52 = 0; _i52 < _size48; ++_i52) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(OrientationSensors[_i52])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write OrientationSensors field
bool SensorRPCData::write_OrientationSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(OrientationSensors.size()))) {
        return false;
    }
    for (const auto& _item53 : OrientationSensors) {
        if (!writer.writeNested(_item53)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) OrientationSensors field
bool SensorRPCData::nested_read_OrientationSensors(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    OrientationSensors.clear();
    uint32_t _size54;
    yarp::os::idl::WireState _etype57;
    reader.readListBegin(_etype57, _size54);
    OrientationSensors.resize(_size54);
    for (size_t _i58 = 0; _i58 < _size54; ++_i58) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(OrientationSensors[_i58])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) OrientationSensors field
bool SensorRPCData::nested_write_OrientationSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(OrientationSensors.size()))) {
        return false;
    }
    for (const auto& _item59 : OrientationSensors) {
        if (!writer.writeNested(_item59)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read TemperatureSensors field
bool SensorRPCData::read_TemperatureSensors(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    TemperatureSensors.clear();
    uint32_t _size60;
    yarp::os::idl::WireState _etype63;
    reader.readListBegin(_etype63, _size60);
    TemperatureSensors.resize(_size60);
    for (size_t _i64 = 0; _i64 < _size60; ++_i64) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(TemperatureSensors[_i64])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write TemperatureSensors field
bool SensorRPCData::write_TemperatureSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(TemperatureSensors.size()))) {
        return false;
    }
    for (const auto& _item65 : TemperatureSensors) {
        if (!writer.writeNested(_item65)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) TemperatureSensors field
bool SensorRPCData::nested_read_TemperatureSensors(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    TemperatureSensors.clear();
    uint32_t _size66;
    yarp::os::idl::WireState _etype69;
    reader.readListBegin(_etype69, _size66);
    TemperatureSensors.resize(_size66);
    for (size_t _i70 = 0; _i70 < _size66; ++_i70) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(TemperatureSensors[_i70])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) TemperatureSensors field
bool SensorRPCData::nested_write_TemperatureSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(TemperatureSensors.size()))) {
        return false;
    }
    for (const auto& _item71 : TemperatureSensors) {
        if (!writer.writeNested(_item71)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read SixAxisForceTorqueSensors field
bool SensorRPCData::read_SixAxisForceTorqueSensors(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    SixAxisForceTorqueSensors.clear();
    uint32_t _size72;
    yarp::os::idl::WireState _etype75;
    reader.readListBegin(_etype75, _size72);
    SixAxisForceTorqueSensors.resize(_size72);
    for (size_t _i76 = 0; _i76 < _size72; ++_i76) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(SixAxisForceTorqueSensors[_i76])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write SixAxisForceTorqueSensors field
bool SensorRPCData::write_SixAxisForceTorqueSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(SixAxisForceTorqueSensors.size()))) {
        return false;
    }
    for (const auto& _item77 : SixAxisForceTorqueSensors) {
        if (!writer.writeNested(_item77)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) SixAxisForceTorqueSensors field
bool SensorRPCData::nested_read_SixAxisForceTorqueSensors(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    SixAxisForceTorqueSensors.clear();
    uint32_t _size78;
    yarp::os::idl::WireState _etype81;
    reader.readListBegin(_etype81, _size78);
    SixAxisForceTorqueSensors.resize(_size78);
    for (size_t _i82 = 0; _i82 < _size78; ++_i82) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(SixAxisForceTorqueSensors[_i82])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) SixAxisForceTorqueSensors field
bool SensorRPCData::nested_write_SixAxisForceTorqueSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(SixAxisForceTorqueSensors.size()))) {
        return false;
    }
    for (const auto& _item83 : SixAxisForceTorqueSensors) {
        if (!writer.writeNested(_item83)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read ContactLoadCellArrays field
bool SensorRPCData::read_ContactLoadCellArrays(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    ContactLoadCellArrays.clear();
    uint32_t _size84;
    yarp::os::idl::WireState _etype87;
    reader.readListBegin(_etype87, _size84);
    ContactLoadCellArrays.resize(_size84);
    for (size_t _i88 = 0; _i88 < _size84; ++_i88) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(ContactLoadCellArrays[_i88])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write ContactLoadCellArrays field
bool SensorRPCData::write_ContactLoadCellArrays(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ContactLoadCellArrays.size()))) {
        return false;
    }
    for (const auto& _item89 : ContactLoadCellArrays) {
        if (!writer.writeNested(_item89)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) ContactLoadCellArrays field
bool SensorRPCData::nested_read_ContactLoadCellArrays(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    ContactLoadCellArrays.clear();
    uint32_t _size90;
    yarp::os::idl::WireState _etype93;
    reader.readListBegin(_etype93, _size90);
    ContactLoadCellArrays.resize(_size90);
    for (size_t _i94 = 0; _i94 < _size90; ++_i94) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(ContactLoadCellArrays[_i94])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) ContactLoadCellArrays field
bool SensorRPCData::nested_write_ContactLoadCellArrays(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ContactLoadCellArrays.size()))) {
        return false;
    }
    for (const auto& _item95 : ContactLoadCellArrays) {
        if (!writer.writeNested(_item95)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read EncoderArrays field
bool SensorRPCData::read_EncoderArrays(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    EncoderArrays.clear();
    uint32_t _size96;
    yarp::os::idl::WireState _etype99;
    reader.readListBegin(_etype99, _size96);
    EncoderArrays.resize(_size96);
    for (size_t _i100 = 0; _i100 < _size96; ++_i100) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(EncoderArrays[_i100])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write EncoderArrays field
bool SensorRPCData::write_EncoderArrays(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(EncoderArrays.size()))) {
        return false;
    }
    for (const auto& _item101 : EncoderArrays) {
        if (!writer.writeNested(_item101)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) EncoderArrays field
bool SensorRPCData::nested_read_EncoderArrays(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    EncoderArrays.clear();
    uint32_t _size102;
    yarp::os::idl::WireState _etype105;
    reader.readListBegin(_etype105, _size102);
    EncoderArrays.resize(_size102);
    for (size_t _i106 = 0; _i106 < _size102; ++_i106) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(EncoderArrays[_i106])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) EncoderArrays field
bool SensorRPCData::nested_write_EncoderArrays(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(EncoderArrays.size()))) {
        return false;
    }
    for (const auto& _item107 : EncoderArrays) {
        if (!writer.writeNested(_item107)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read SkinPatches field
bool SensorRPCData::read_SkinPatches(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    SkinPatches.clear();
    uint32_t _size108;
    yarp::os::idl::WireState _etype111;
    reader.readListBegin(_etype111, _size108);
    SkinPatches.resize(_size108);
    for (size_t _i112 = 0; _i112 < _size108; ++_i112) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(SkinPatches[_i112])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write SkinPatches field
bool SensorRPCData::write_SkinPatches(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(SkinPatches.size()))) {
        return false;
    }
    for (const auto& _item113 : SkinPatches) {
        if (!writer.writeNested(_item113)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) SkinPatches field
bool SensorRPCData::nested_read_SkinPatches(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    SkinPatches.clear();
    uint32_t _size114;
    yarp::os::idl::WireState _etype117;
    reader.readListBegin(_etype117, _size114);
    SkinPatches.resize(_size114);
    for (size_t _i118 = 0; _i118 < _size114; ++_i118) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(SkinPatches[_i118])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) SkinPatches field
bool SensorRPCData::nested_write_SkinPatches(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(SkinPatches.size()))) {
        return false;
    }
    for (const auto& _item119 : SkinPatches) {
        if (!writer.writeNested(_item119)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read PositionSensors field
bool SensorRPCData::read_PositionSensors(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    PositionSensors.clear();
    uint32_t _size120;
    yarp::os::idl::WireState _etype123;
    reader.readListBegin(_etype123, _size120);
    PositionSensors.resize(_size120);
    for (size_t _i124 = 0; _i124 < _size120; ++_i124) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(PositionSensors[_i124])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write PositionSensors field
bool SensorRPCData::write_PositionSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(PositionSensors.size()))) {
        return false;
    }
    for (const auto& _item125 : PositionSensors) {
        if (!writer.writeNested(_item125)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) PositionSensors field
bool SensorRPCData::nested_read_PositionSensors(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    PositionSensors.clear();
    uint32_t _size126;
    yarp::os::idl::WireState _etype129;
    reader.readListBegin(_etype129, _size126);
    PositionSensors.resize(_size126);
    for (size_t _i130 = 0; _i130 < _size126; ++_i130) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(PositionSensors[_i130])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) PositionSensors field
bool SensorRPCData::nested_write_PositionSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(PositionSensors.size()))) {
        return false;
    }
    for (const auto& _item131 : PositionSensors) {
        if (!writer.writeNested(_item131)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}
