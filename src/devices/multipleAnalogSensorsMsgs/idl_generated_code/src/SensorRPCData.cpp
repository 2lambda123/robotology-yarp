/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <SensorRPCData.h>

// Default constructor
SensorRPCData::SensorRPCData() :
        WirePortable(),
        ThreeAxisGyroscopes(),
        ThreeAxisLinearAccelerometers(),
        ThreeAxisMagnetometers(),
        OrientationSensors(),
        TemperatureSensors(),
        SixAxisForceTorqueSensors(),
        ContactLoadCellArrays(),
        EncoderArrays(),
        SkinPatches()
{
}

// Constructor with field values
SensorRPCData::SensorRPCData(const std::vector<SensorMetadata>& ThreeAxisGyroscopes,
                             const std::vector<SensorMetadata>& ThreeAxisLinearAccelerometers,
                             const std::vector<SensorMetadata>& ThreeAxisMagnetometers,
                             const std::vector<SensorMetadata>& OrientationSensors,
                             const std::vector<SensorMetadata>& TemperatureSensors,
                             const std::vector<SensorMetadata>& SixAxisForceTorqueSensors,
                             const std::vector<SensorMetadata>& ContactLoadCellArrays,
                             const std::vector<SensorMetadata>& EncoderArrays,
                             const std::vector<SensorMetadata>& SkinPatches) :
        WirePortable(),
        ThreeAxisGyroscopes(ThreeAxisGyroscopes),
        ThreeAxisLinearAccelerometers(ThreeAxisLinearAccelerometers),
        ThreeAxisMagnetometers(ThreeAxisMagnetometers),
        OrientationSensors(OrientationSensors),
        TemperatureSensors(TemperatureSensors),
        SixAxisForceTorqueSensors(SixAxisForceTorqueSensors),
        ContactLoadCellArrays(ContactLoadCellArrays),
        EncoderArrays(EncoderArrays),
        SkinPatches(SkinPatches)
{
}

// Read structure on a Wire
bool SensorRPCData::read(yarp::os::idl::WireReader& reader)
{
    if (!read_ThreeAxisGyroscopes(reader)) {
        return false;
    }
    if (!read_ThreeAxisLinearAccelerometers(reader)) {
        return false;
    }
    if (!read_ThreeAxisMagnetometers(reader)) {
        return false;
    }
    if (!read_OrientationSensors(reader)) {
        return false;
    }
    if (!read_TemperatureSensors(reader)) {
        return false;
    }
    if (!read_SixAxisForceTorqueSensors(reader)) {
        return false;
    }
    if (!read_ContactLoadCellArrays(reader)) {
        return false;
    }
    if (!read_EncoderArrays(reader)) {
        return false;
    }
    if (!read_SkinPatches(reader)) {
        return false;
    }
    return !reader.isError();
}

// Read structure on a Connection
bool SensorRPCData::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(9)) {
        return false;
    }
    return read(reader);
}

// Write structure on a Wire
bool SensorRPCData::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_ThreeAxisGyroscopes(writer)) {
        return false;
    }
    if (!write_ThreeAxisLinearAccelerometers(writer)) {
        return false;
    }
    if (!write_ThreeAxisMagnetometers(writer)) {
        return false;
    }
    if (!write_OrientationSensors(writer)) {
        return false;
    }
    if (!write_TemperatureSensors(writer)) {
        return false;
    }
    if (!write_SixAxisForceTorqueSensors(writer)) {
        return false;
    }
    if (!write_ContactLoadCellArrays(writer)) {
        return false;
    }
    if (!write_EncoderArrays(writer)) {
        return false;
    }
    if (!write_SkinPatches(writer)) {
        return false;
    }
    return !writer.isError();
}

// Write structure on a Connection
bool SensorRPCData::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(9)) {
        return false;
    }
    return write(writer);
}

// Convert to a printable string
std::string SensorRPCData::toString() const
{
    yarp::os::Bottle b;
    b.read(*this);
    return b.toString();
}

// Editor: default constructor
SensorRPCData::Editor::Editor()
{
    group = 0;
    obj_owned = true;
    obj = new SensorRPCData;
    dirty_flags(false);
    yarp().setOwner(*this);
}

// Editor: constructor with base class
SensorRPCData::Editor::Editor(SensorRPCData& obj)
{
    group = 0;
    obj_owned = false;
    edit(obj, false);
    yarp().setOwner(*this);
}

// Editor: destructor
SensorRPCData::Editor::~Editor()
{
    if (obj_owned) {
        delete obj;
    }
}

// Editor: edit
bool SensorRPCData::Editor::edit(SensorRPCData& obj, bool dirty)
{
    if (obj_owned) {
        delete this->obj;
    }
    this->obj = &obj;
    obj_owned = false;
    dirty_flags(dirty);
    return true;
}

// Editor: validity check
bool SensorRPCData::Editor::isValid() const
{
    return obj != nullptr;
}

// Editor: state
SensorRPCData& SensorRPCData::Editor::state()
{
    return *obj;
}

// Editor: grouping begin
void SensorRPCData::Editor::start_editing()
{
    group++;
}

// Editor: grouping end
void SensorRPCData::Editor::stop_editing()
{
    group--;
    if (group == 0 && is_dirty) {
        communicate();
    }
}
// Editor: ThreeAxisGyroscopes setter
void SensorRPCData::Editor::set_ThreeAxisGyroscopes(const std::vector<SensorMetadata>& ThreeAxisGyroscopes)
{
    will_set_ThreeAxisGyroscopes();
    obj->ThreeAxisGyroscopes = ThreeAxisGyroscopes;
    mark_dirty_ThreeAxisGyroscopes();
    communicate();
    did_set_ThreeAxisGyroscopes();
}

// Editor: ThreeAxisGyroscopes setter (list)
void SensorRPCData::Editor::set_ThreeAxisGyroscopes(int index, const SensorMetadata& elem)
{
    will_set_ThreeAxisGyroscopes();
    obj->ThreeAxisGyroscopes[index] = elem;
    mark_dirty_ThreeAxisGyroscopes();
    communicate();
    did_set_ThreeAxisGyroscopes();
}

// Editor: ThreeAxisGyroscopes getter
const std::vector<SensorMetadata>& SensorRPCData::Editor::get_ThreeAxisGyroscopes() const
{
    return obj->ThreeAxisGyroscopes;
}

// Editor: ThreeAxisGyroscopes will_set
bool SensorRPCData::Editor::will_set_ThreeAxisGyroscopes()
{
    return true;
}

// Editor: ThreeAxisGyroscopes did_set
bool SensorRPCData::Editor::did_set_ThreeAxisGyroscopes()
{
    return true;
}

// Editor: ThreeAxisLinearAccelerometers setter
void SensorRPCData::Editor::set_ThreeAxisLinearAccelerometers(const std::vector<SensorMetadata>& ThreeAxisLinearAccelerometers)
{
    will_set_ThreeAxisLinearAccelerometers();
    obj->ThreeAxisLinearAccelerometers = ThreeAxisLinearAccelerometers;
    mark_dirty_ThreeAxisLinearAccelerometers();
    communicate();
    did_set_ThreeAxisLinearAccelerometers();
}

// Editor: ThreeAxisLinearAccelerometers setter (list)
void SensorRPCData::Editor::set_ThreeAxisLinearAccelerometers(int index, const SensorMetadata& elem)
{
    will_set_ThreeAxisLinearAccelerometers();
    obj->ThreeAxisLinearAccelerometers[index] = elem;
    mark_dirty_ThreeAxisLinearAccelerometers();
    communicate();
    did_set_ThreeAxisLinearAccelerometers();
}

// Editor: ThreeAxisLinearAccelerometers getter
const std::vector<SensorMetadata>& SensorRPCData::Editor::get_ThreeAxisLinearAccelerometers() const
{
    return obj->ThreeAxisLinearAccelerometers;
}

// Editor: ThreeAxisLinearAccelerometers will_set
bool SensorRPCData::Editor::will_set_ThreeAxisLinearAccelerometers()
{
    return true;
}

// Editor: ThreeAxisLinearAccelerometers did_set
bool SensorRPCData::Editor::did_set_ThreeAxisLinearAccelerometers()
{
    return true;
}

// Editor: ThreeAxisMagnetometers setter
void SensorRPCData::Editor::set_ThreeAxisMagnetometers(const std::vector<SensorMetadata>& ThreeAxisMagnetometers)
{
    will_set_ThreeAxisMagnetometers();
    obj->ThreeAxisMagnetometers = ThreeAxisMagnetometers;
    mark_dirty_ThreeAxisMagnetometers();
    communicate();
    did_set_ThreeAxisMagnetometers();
}

// Editor: ThreeAxisMagnetometers setter (list)
void SensorRPCData::Editor::set_ThreeAxisMagnetometers(int index, const SensorMetadata& elem)
{
    will_set_ThreeAxisMagnetometers();
    obj->ThreeAxisMagnetometers[index] = elem;
    mark_dirty_ThreeAxisMagnetometers();
    communicate();
    did_set_ThreeAxisMagnetometers();
}

// Editor: ThreeAxisMagnetometers getter
const std::vector<SensorMetadata>& SensorRPCData::Editor::get_ThreeAxisMagnetometers() const
{
    return obj->ThreeAxisMagnetometers;
}

// Editor: ThreeAxisMagnetometers will_set
bool SensorRPCData::Editor::will_set_ThreeAxisMagnetometers()
{
    return true;
}

// Editor: ThreeAxisMagnetometers did_set
bool SensorRPCData::Editor::did_set_ThreeAxisMagnetometers()
{
    return true;
}

// Editor: OrientationSensors setter
void SensorRPCData::Editor::set_OrientationSensors(const std::vector<SensorMetadata>& OrientationSensors)
{
    will_set_OrientationSensors();
    obj->OrientationSensors = OrientationSensors;
    mark_dirty_OrientationSensors();
    communicate();
    did_set_OrientationSensors();
}

// Editor: OrientationSensors setter (list)
void SensorRPCData::Editor::set_OrientationSensors(int index, const SensorMetadata& elem)
{
    will_set_OrientationSensors();
    obj->OrientationSensors[index] = elem;
    mark_dirty_OrientationSensors();
    communicate();
    did_set_OrientationSensors();
}

// Editor: OrientationSensors getter
const std::vector<SensorMetadata>& SensorRPCData::Editor::get_OrientationSensors() const
{
    return obj->OrientationSensors;
}

// Editor: OrientationSensors will_set
bool SensorRPCData::Editor::will_set_OrientationSensors()
{
    return true;
}

// Editor: OrientationSensors did_set
bool SensorRPCData::Editor::did_set_OrientationSensors()
{
    return true;
}

// Editor: TemperatureSensors setter
void SensorRPCData::Editor::set_TemperatureSensors(const std::vector<SensorMetadata>& TemperatureSensors)
{
    will_set_TemperatureSensors();
    obj->TemperatureSensors = TemperatureSensors;
    mark_dirty_TemperatureSensors();
    communicate();
    did_set_TemperatureSensors();
}

// Editor: TemperatureSensors setter (list)
void SensorRPCData::Editor::set_TemperatureSensors(int index, const SensorMetadata& elem)
{
    will_set_TemperatureSensors();
    obj->TemperatureSensors[index] = elem;
    mark_dirty_TemperatureSensors();
    communicate();
    did_set_TemperatureSensors();
}

// Editor: TemperatureSensors getter
const std::vector<SensorMetadata>& SensorRPCData::Editor::get_TemperatureSensors() const
{
    return obj->TemperatureSensors;
}

// Editor: TemperatureSensors will_set
bool SensorRPCData::Editor::will_set_TemperatureSensors()
{
    return true;
}

// Editor: TemperatureSensors did_set
bool SensorRPCData::Editor::did_set_TemperatureSensors()
{
    return true;
}

// Editor: SixAxisForceTorqueSensors setter
void SensorRPCData::Editor::set_SixAxisForceTorqueSensors(const std::vector<SensorMetadata>& SixAxisForceTorqueSensors)
{
    will_set_SixAxisForceTorqueSensors();
    obj->SixAxisForceTorqueSensors = SixAxisForceTorqueSensors;
    mark_dirty_SixAxisForceTorqueSensors();
    communicate();
    did_set_SixAxisForceTorqueSensors();
}

// Editor: SixAxisForceTorqueSensors setter (list)
void SensorRPCData::Editor::set_SixAxisForceTorqueSensors(int index, const SensorMetadata& elem)
{
    will_set_SixAxisForceTorqueSensors();
    obj->SixAxisForceTorqueSensors[index] = elem;
    mark_dirty_SixAxisForceTorqueSensors();
    communicate();
    did_set_SixAxisForceTorqueSensors();
}

// Editor: SixAxisForceTorqueSensors getter
const std::vector<SensorMetadata>& SensorRPCData::Editor::get_SixAxisForceTorqueSensors() const
{
    return obj->SixAxisForceTorqueSensors;
}

// Editor: SixAxisForceTorqueSensors will_set
bool SensorRPCData::Editor::will_set_SixAxisForceTorqueSensors()
{
    return true;
}

// Editor: SixAxisForceTorqueSensors did_set
bool SensorRPCData::Editor::did_set_SixAxisForceTorqueSensors()
{
    return true;
}

// Editor: ContactLoadCellArrays setter
void SensorRPCData::Editor::set_ContactLoadCellArrays(const std::vector<SensorMetadata>& ContactLoadCellArrays)
{
    will_set_ContactLoadCellArrays();
    obj->ContactLoadCellArrays = ContactLoadCellArrays;
    mark_dirty_ContactLoadCellArrays();
    communicate();
    did_set_ContactLoadCellArrays();
}

// Editor: ContactLoadCellArrays setter (list)
void SensorRPCData::Editor::set_ContactLoadCellArrays(int index, const SensorMetadata& elem)
{
    will_set_ContactLoadCellArrays();
    obj->ContactLoadCellArrays[index] = elem;
    mark_dirty_ContactLoadCellArrays();
    communicate();
    did_set_ContactLoadCellArrays();
}

// Editor: ContactLoadCellArrays getter
const std::vector<SensorMetadata>& SensorRPCData::Editor::get_ContactLoadCellArrays() const
{
    return obj->ContactLoadCellArrays;
}

// Editor: ContactLoadCellArrays will_set
bool SensorRPCData::Editor::will_set_ContactLoadCellArrays()
{
    return true;
}

// Editor: ContactLoadCellArrays did_set
bool SensorRPCData::Editor::did_set_ContactLoadCellArrays()
{
    return true;
}

// Editor: EncoderArrays setter
void SensorRPCData::Editor::set_EncoderArrays(const std::vector<SensorMetadata>& EncoderArrays)
{
    will_set_EncoderArrays();
    obj->EncoderArrays = EncoderArrays;
    mark_dirty_EncoderArrays();
    communicate();
    did_set_EncoderArrays();
}

// Editor: EncoderArrays setter (list)
void SensorRPCData::Editor::set_EncoderArrays(int index, const SensorMetadata& elem)
{
    will_set_EncoderArrays();
    obj->EncoderArrays[index] = elem;
    mark_dirty_EncoderArrays();
    communicate();
    did_set_EncoderArrays();
}

// Editor: EncoderArrays getter
const std::vector<SensorMetadata>& SensorRPCData::Editor::get_EncoderArrays() const
{
    return obj->EncoderArrays;
}

// Editor: EncoderArrays will_set
bool SensorRPCData::Editor::will_set_EncoderArrays()
{
    return true;
}

// Editor: EncoderArrays did_set
bool SensorRPCData::Editor::did_set_EncoderArrays()
{
    return true;
}

// Editor: SkinPatches setter
void SensorRPCData::Editor::set_SkinPatches(const std::vector<SensorMetadata>& SkinPatches)
{
    will_set_SkinPatches();
    obj->SkinPatches = SkinPatches;
    mark_dirty_SkinPatches();
    communicate();
    did_set_SkinPatches();
}

// Editor: SkinPatches setter (list)
void SensorRPCData::Editor::set_SkinPatches(int index, const SensorMetadata& elem)
{
    will_set_SkinPatches();
    obj->SkinPatches[index] = elem;
    mark_dirty_SkinPatches();
    communicate();
    did_set_SkinPatches();
}

// Editor: SkinPatches getter
const std::vector<SensorMetadata>& SensorRPCData::Editor::get_SkinPatches() const
{
    return obj->SkinPatches;
}

// Editor: SkinPatches will_set
bool SensorRPCData::Editor::will_set_SkinPatches()
{
    return true;
}

// Editor: SkinPatches did_set
bool SensorRPCData::Editor::did_set_SkinPatches()
{
    return true;
}

// Editor: clean
void SensorRPCData::Editor::clean()
{
    dirty_flags(false);
}

// Editor: read
bool SensorRPCData::Editor::read(yarp::os::ConnectionReader& connection)
{
    if (!isValid()) {
        return false;
    }
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        return false;
    }
    int len = reader.getLength();
    if (len == 0) {
        yarp::os::idl::WireWriter writer(reader);
        if (writer.isNull()) {
            return true;
        }
        if (!writer.writeListHeader(1)) {
            return false;
        }
        writer.writeString("send: 'help' or 'patch (param1 val1) (param2 val2)'");
        return true;
    }
    std::string tag;
    if (!reader.readString(tag)) {
        return false;
    }
    if (tag == "help") {
        yarp::os::idl::WireWriter writer(reader);
        if (writer.isNull()) {
            return true;
        }
        if (!writer.writeListHeader(2)) {
            return false;
        }
        if (!writer.writeTag("many", 1, 0)) {
            return false;
        }
        if (reader.getLength() > 0) {
            std::string field;
            if (!reader.readString(field)) {
                return false;
            }
            if (field == "ThreeAxisGyroscopes") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::vector<SensorMetadata> ThreeAxisGyroscopes")) {
                    return false;
                }
            }
            if (field == "ThreeAxisLinearAccelerometers") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::vector<SensorMetadata> ThreeAxisLinearAccelerometers")) {
                    return false;
                }
            }
            if (field == "ThreeAxisMagnetometers") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::vector<SensorMetadata> ThreeAxisMagnetometers")) {
                    return false;
                }
            }
            if (field == "OrientationSensors") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::vector<SensorMetadata> OrientationSensors")) {
                    return false;
                }
            }
            if (field == "TemperatureSensors") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::vector<SensorMetadata> TemperatureSensors")) {
                    return false;
                }
            }
            if (field == "SixAxisForceTorqueSensors") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::vector<SensorMetadata> SixAxisForceTorqueSensors")) {
                    return false;
                }
            }
            if (field == "ContactLoadCellArrays") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::vector<SensorMetadata> ContactLoadCellArrays")) {
                    return false;
                }
            }
            if (field == "EncoderArrays") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::vector<SensorMetadata> EncoderArrays")) {
                    return false;
                }
            }
            if (field == "SkinPatches") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::vector<SensorMetadata> SkinPatches")) {
                    return false;
                }
            }
        }
        if (!writer.writeListHeader(10)) {
            return false;
        }
        writer.writeString("*** Available fields:");
        writer.writeString("ThreeAxisGyroscopes");
        writer.writeString("ThreeAxisLinearAccelerometers");
        writer.writeString("ThreeAxisMagnetometers");
        writer.writeString("OrientationSensors");
        writer.writeString("TemperatureSensors");
        writer.writeString("SixAxisForceTorqueSensors");
        writer.writeString("ContactLoadCellArrays");
        writer.writeString("EncoderArrays");
        writer.writeString("SkinPatches");
        return true;
    }
    bool nested = true;
    bool have_act = false;
    if (tag != "patch") {
        if (((len - 1) % 2) != 0) {
            return false;
        }
        len = 1 + ((len - 1) / 2);
        nested = false;
        have_act = true;
    }
    for (int i = 1; i < len; ++i) {
        if (nested && !reader.readListHeader(3)) {
            return false;
        }
        std::string act;
        std::string key;
        if (have_act) {
            act = tag;
        } else if (!reader.readString(act)) {
            return false;
        }
        if (!reader.readString(key)) {
            return false;
        }
        if (key == "ThreeAxisGyroscopes") {
            will_set_ThreeAxisGyroscopes();
            if (!obj->nested_read_ThreeAxisGyroscopes(reader)) {
                return false;
            }
            did_set_ThreeAxisGyroscopes();
        } else if (key == "ThreeAxisLinearAccelerometers") {
            will_set_ThreeAxisLinearAccelerometers();
            if (!obj->nested_read_ThreeAxisLinearAccelerometers(reader)) {
                return false;
            }
            did_set_ThreeAxisLinearAccelerometers();
        } else if (key == "ThreeAxisMagnetometers") {
            will_set_ThreeAxisMagnetometers();
            if (!obj->nested_read_ThreeAxisMagnetometers(reader)) {
                return false;
            }
            did_set_ThreeAxisMagnetometers();
        } else if (key == "OrientationSensors") {
            will_set_OrientationSensors();
            if (!obj->nested_read_OrientationSensors(reader)) {
                return false;
            }
            did_set_OrientationSensors();
        } else if (key == "TemperatureSensors") {
            will_set_TemperatureSensors();
            if (!obj->nested_read_TemperatureSensors(reader)) {
                return false;
            }
            did_set_TemperatureSensors();
        } else if (key == "SixAxisForceTorqueSensors") {
            will_set_SixAxisForceTorqueSensors();
            if (!obj->nested_read_SixAxisForceTorqueSensors(reader)) {
                return false;
            }
            did_set_SixAxisForceTorqueSensors();
        } else if (key == "ContactLoadCellArrays") {
            will_set_ContactLoadCellArrays();
            if (!obj->nested_read_ContactLoadCellArrays(reader)) {
                return false;
            }
            did_set_ContactLoadCellArrays();
        } else if (key == "EncoderArrays") {
            will_set_EncoderArrays();
            if (!obj->nested_read_EncoderArrays(reader)) {
                return false;
            }
            did_set_EncoderArrays();
        } else if (key == "SkinPatches") {
            will_set_SkinPatches();
            if (!obj->nested_read_SkinPatches(reader)) {
                return false;
            }
            did_set_SkinPatches();
        } else {
            // would be useful to have a fallback here
        }
    }
    reader.accept();
    yarp::os::idl::WireWriter writer(reader);
    if (writer.isNull()) {
        return true;
    }
    writer.writeListHeader(1);
    writer.writeVocab(yarp::os::createVocab('o', 'k'));
    return true;
}

// Editor: write
bool SensorRPCData::Editor::write(yarp::os::ConnectionWriter& connection) const
{
    if (!isValid()) {
        return false;
    }
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(dirty_count + 1)) {
        return false;
    }
    if (!writer.writeString("patch")) {
        return false;
    }
    if (is_dirty_ThreeAxisGyroscopes) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("ThreeAxisGyroscopes")) {
            return false;
        }
        if (!obj->nested_write_ThreeAxisGyroscopes(writer)) {
            return false;
        }
    }
    if (is_dirty_ThreeAxisLinearAccelerometers) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("ThreeAxisLinearAccelerometers")) {
            return false;
        }
        if (!obj->nested_write_ThreeAxisLinearAccelerometers(writer)) {
            return false;
        }
    }
    if (is_dirty_ThreeAxisMagnetometers) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("ThreeAxisMagnetometers")) {
            return false;
        }
        if (!obj->nested_write_ThreeAxisMagnetometers(writer)) {
            return false;
        }
    }
    if (is_dirty_OrientationSensors) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("OrientationSensors")) {
            return false;
        }
        if (!obj->nested_write_OrientationSensors(writer)) {
            return false;
        }
    }
    if (is_dirty_TemperatureSensors) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("TemperatureSensors")) {
            return false;
        }
        if (!obj->nested_write_TemperatureSensors(writer)) {
            return false;
        }
    }
    if (is_dirty_SixAxisForceTorqueSensors) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("SixAxisForceTorqueSensors")) {
            return false;
        }
        if (!obj->nested_write_SixAxisForceTorqueSensors(writer)) {
            return false;
        }
    }
    if (is_dirty_ContactLoadCellArrays) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("ContactLoadCellArrays")) {
            return false;
        }
        if (!obj->nested_write_ContactLoadCellArrays(writer)) {
            return false;
        }
    }
    if (is_dirty_EncoderArrays) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("EncoderArrays")) {
            return false;
        }
        if (!obj->nested_write_EncoderArrays(writer)) {
            return false;
        }
    }
    if (is_dirty_SkinPatches) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("SkinPatches")) {
            return false;
        }
        if (!obj->nested_write_SkinPatches(writer)) {
            return false;
        }
    }
    return !writer.isError();
}

// Editor: send if possible
void SensorRPCData::Editor::communicate()
{
    if (group != 0) {
        return;
    }
    if (yarp().canWrite()) {
        yarp().write(*this);
        clean();
    }
}

// Editor: mark dirty overall
void SensorRPCData::Editor::mark_dirty()
{
    is_dirty = true;
}

// Editor: ThreeAxisGyroscopes mark_dirty
void SensorRPCData::Editor::mark_dirty_ThreeAxisGyroscopes()
{
    if (is_dirty_ThreeAxisGyroscopes) {
        return;
    }
    dirty_count++;
    is_dirty_ThreeAxisGyroscopes = true;
    mark_dirty();
}

// Editor: ThreeAxisLinearAccelerometers mark_dirty
void SensorRPCData::Editor::mark_dirty_ThreeAxisLinearAccelerometers()
{
    if (is_dirty_ThreeAxisLinearAccelerometers) {
        return;
    }
    dirty_count++;
    is_dirty_ThreeAxisLinearAccelerometers = true;
    mark_dirty();
}

// Editor: ThreeAxisMagnetometers mark_dirty
void SensorRPCData::Editor::mark_dirty_ThreeAxisMagnetometers()
{
    if (is_dirty_ThreeAxisMagnetometers) {
        return;
    }
    dirty_count++;
    is_dirty_ThreeAxisMagnetometers = true;
    mark_dirty();
}

// Editor: OrientationSensors mark_dirty
void SensorRPCData::Editor::mark_dirty_OrientationSensors()
{
    if (is_dirty_OrientationSensors) {
        return;
    }
    dirty_count++;
    is_dirty_OrientationSensors = true;
    mark_dirty();
}

// Editor: TemperatureSensors mark_dirty
void SensorRPCData::Editor::mark_dirty_TemperatureSensors()
{
    if (is_dirty_TemperatureSensors) {
        return;
    }
    dirty_count++;
    is_dirty_TemperatureSensors = true;
    mark_dirty();
}

// Editor: SixAxisForceTorqueSensors mark_dirty
void SensorRPCData::Editor::mark_dirty_SixAxisForceTorqueSensors()
{
    if (is_dirty_SixAxisForceTorqueSensors) {
        return;
    }
    dirty_count++;
    is_dirty_SixAxisForceTorqueSensors = true;
    mark_dirty();
}

// Editor: ContactLoadCellArrays mark_dirty
void SensorRPCData::Editor::mark_dirty_ContactLoadCellArrays()
{
    if (is_dirty_ContactLoadCellArrays) {
        return;
    }
    dirty_count++;
    is_dirty_ContactLoadCellArrays = true;
    mark_dirty();
}

// Editor: EncoderArrays mark_dirty
void SensorRPCData::Editor::mark_dirty_EncoderArrays()
{
    if (is_dirty_EncoderArrays) {
        return;
    }
    dirty_count++;
    is_dirty_EncoderArrays = true;
    mark_dirty();
}

// Editor: SkinPatches mark_dirty
void SensorRPCData::Editor::mark_dirty_SkinPatches()
{
    if (is_dirty_SkinPatches) {
        return;
    }
    dirty_count++;
    is_dirty_SkinPatches = true;
    mark_dirty();
}

// Editor: dirty_flags
void SensorRPCData::Editor::dirty_flags(bool flag)
{
    is_dirty = flag;
    is_dirty_ThreeAxisGyroscopes = flag;
    is_dirty_ThreeAxisLinearAccelerometers = flag;
    is_dirty_ThreeAxisMagnetometers = flag;
    is_dirty_OrientationSensors = flag;
    is_dirty_TemperatureSensors = flag;
    is_dirty_SixAxisForceTorqueSensors = flag;
    is_dirty_ContactLoadCellArrays = flag;
    is_dirty_EncoderArrays = flag;
    is_dirty_SkinPatches = flag;
    dirty_count = flag ? 9 : 0;
}

// read ThreeAxisGyroscopes field
bool SensorRPCData::read_ThreeAxisGyroscopes(yarp::os::idl::WireReader& reader)
{
    ThreeAxisGyroscopes.clear();
    uint32_t _size132;
    yarp::os::idl::WireState _etype135;
    reader.readListBegin(_etype135, _size132);
    ThreeAxisGyroscopes.resize(_size132);
    for (auto& _elem136 : ThreeAxisGyroscopes) {
        if (!reader.readNested(_elem136)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write ThreeAxisGyroscopes field
bool SensorRPCData::write_ThreeAxisGyroscopes(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisGyroscopes.size()))) {
        return false;
    }
    for (const auto& _item137 : ThreeAxisGyroscopes) {
        if (!writer.writeNested(_item137)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) ThreeAxisGyroscopes field
bool SensorRPCData::nested_read_ThreeAxisGyroscopes(yarp::os::idl::WireReader& reader)
{
    ThreeAxisGyroscopes.clear();
    uint32_t _size138;
    yarp::os::idl::WireState _etype141;
    reader.readListBegin(_etype141, _size138);
    ThreeAxisGyroscopes.resize(_size138);
    for (auto& _elem142 : ThreeAxisGyroscopes) {
        if (!reader.readNested(_elem142)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) ThreeAxisGyroscopes field
bool SensorRPCData::nested_write_ThreeAxisGyroscopes(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisGyroscopes.size()))) {
        return false;
    }
    for (const auto& _item143 : ThreeAxisGyroscopes) {
        if (!writer.writeNested(_item143)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read ThreeAxisLinearAccelerometers field
bool SensorRPCData::read_ThreeAxisLinearAccelerometers(yarp::os::idl::WireReader& reader)
{
    ThreeAxisLinearAccelerometers.clear();
    uint32_t _size144;
    yarp::os::idl::WireState _etype147;
    reader.readListBegin(_etype147, _size144);
    ThreeAxisLinearAccelerometers.resize(_size144);
    for (auto& _elem148 : ThreeAxisLinearAccelerometers) {
        if (!reader.readNested(_elem148)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write ThreeAxisLinearAccelerometers field
bool SensorRPCData::write_ThreeAxisLinearAccelerometers(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisLinearAccelerometers.size()))) {
        return false;
    }
    for (const auto& _item149 : ThreeAxisLinearAccelerometers) {
        if (!writer.writeNested(_item149)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) ThreeAxisLinearAccelerometers field
bool SensorRPCData::nested_read_ThreeAxisLinearAccelerometers(yarp::os::idl::WireReader& reader)
{
    ThreeAxisLinearAccelerometers.clear();
    uint32_t _size150;
    yarp::os::idl::WireState _etype153;
    reader.readListBegin(_etype153, _size150);
    ThreeAxisLinearAccelerometers.resize(_size150);
    for (auto& _elem154 : ThreeAxisLinearAccelerometers) {
        if (!reader.readNested(_elem154)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) ThreeAxisLinearAccelerometers field
bool SensorRPCData::nested_write_ThreeAxisLinearAccelerometers(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisLinearAccelerometers.size()))) {
        return false;
    }
    for (const auto& _item155 : ThreeAxisLinearAccelerometers) {
        if (!writer.writeNested(_item155)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read ThreeAxisMagnetometers field
bool SensorRPCData::read_ThreeAxisMagnetometers(yarp::os::idl::WireReader& reader)
{
    ThreeAxisMagnetometers.clear();
    uint32_t _size156;
    yarp::os::idl::WireState _etype159;
    reader.readListBegin(_etype159, _size156);
    ThreeAxisMagnetometers.resize(_size156);
    for (auto& _elem160 : ThreeAxisMagnetometers) {
        if (!reader.readNested(_elem160)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write ThreeAxisMagnetometers field
bool SensorRPCData::write_ThreeAxisMagnetometers(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisMagnetometers.size()))) {
        return false;
    }
    for (const auto& _item161 : ThreeAxisMagnetometers) {
        if (!writer.writeNested(_item161)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) ThreeAxisMagnetometers field
bool SensorRPCData::nested_read_ThreeAxisMagnetometers(yarp::os::idl::WireReader& reader)
{
    ThreeAxisMagnetometers.clear();
    uint32_t _size162;
    yarp::os::idl::WireState _etype165;
    reader.readListBegin(_etype165, _size162);
    ThreeAxisMagnetometers.resize(_size162);
    for (auto& _elem166 : ThreeAxisMagnetometers) {
        if (!reader.readNested(_elem166)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) ThreeAxisMagnetometers field
bool SensorRPCData::nested_write_ThreeAxisMagnetometers(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ThreeAxisMagnetometers.size()))) {
        return false;
    }
    for (const auto& _item167 : ThreeAxisMagnetometers) {
        if (!writer.writeNested(_item167)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read OrientationSensors field
bool SensorRPCData::read_OrientationSensors(yarp::os::idl::WireReader& reader)
{
    OrientationSensors.clear();
    uint32_t _size168;
    yarp::os::idl::WireState _etype171;
    reader.readListBegin(_etype171, _size168);
    OrientationSensors.resize(_size168);
    for (auto& _elem172 : OrientationSensors) {
        if (!reader.readNested(_elem172)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write OrientationSensors field
bool SensorRPCData::write_OrientationSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(OrientationSensors.size()))) {
        return false;
    }
    for (const auto& _item173 : OrientationSensors) {
        if (!writer.writeNested(_item173)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) OrientationSensors field
bool SensorRPCData::nested_read_OrientationSensors(yarp::os::idl::WireReader& reader)
{
    OrientationSensors.clear();
    uint32_t _size174;
    yarp::os::idl::WireState _etype177;
    reader.readListBegin(_etype177, _size174);
    OrientationSensors.resize(_size174);
    for (auto& _elem178 : OrientationSensors) {
        if (!reader.readNested(_elem178)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) OrientationSensors field
bool SensorRPCData::nested_write_OrientationSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(OrientationSensors.size()))) {
        return false;
    }
    for (const auto& _item179 : OrientationSensors) {
        if (!writer.writeNested(_item179)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read TemperatureSensors field
bool SensorRPCData::read_TemperatureSensors(yarp::os::idl::WireReader& reader)
{
    TemperatureSensors.clear();
    uint32_t _size180;
    yarp::os::idl::WireState _etype183;
    reader.readListBegin(_etype183, _size180);
    TemperatureSensors.resize(_size180);
    for (auto& _elem184 : TemperatureSensors) {
        if (!reader.readNested(_elem184)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write TemperatureSensors field
bool SensorRPCData::write_TemperatureSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(TemperatureSensors.size()))) {
        return false;
    }
    for (const auto& _item185 : TemperatureSensors) {
        if (!writer.writeNested(_item185)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) TemperatureSensors field
bool SensorRPCData::nested_read_TemperatureSensors(yarp::os::idl::WireReader& reader)
{
    TemperatureSensors.clear();
    uint32_t _size186;
    yarp::os::idl::WireState _etype189;
    reader.readListBegin(_etype189, _size186);
    TemperatureSensors.resize(_size186);
    for (auto& _elem190 : TemperatureSensors) {
        if (!reader.readNested(_elem190)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) TemperatureSensors field
bool SensorRPCData::nested_write_TemperatureSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(TemperatureSensors.size()))) {
        return false;
    }
    for (const auto& _item191 : TemperatureSensors) {
        if (!writer.writeNested(_item191)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read SixAxisForceTorqueSensors field
bool SensorRPCData::read_SixAxisForceTorqueSensors(yarp::os::idl::WireReader& reader)
{
    SixAxisForceTorqueSensors.clear();
    uint32_t _size192;
    yarp::os::idl::WireState _etype195;
    reader.readListBegin(_etype195, _size192);
    SixAxisForceTorqueSensors.resize(_size192);
    for (auto& _elem196 : SixAxisForceTorqueSensors) {
        if (!reader.readNested(_elem196)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write SixAxisForceTorqueSensors field
bool SensorRPCData::write_SixAxisForceTorqueSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(SixAxisForceTorqueSensors.size()))) {
        return false;
    }
    for (const auto& _item197 : SixAxisForceTorqueSensors) {
        if (!writer.writeNested(_item197)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) SixAxisForceTorqueSensors field
bool SensorRPCData::nested_read_SixAxisForceTorqueSensors(yarp::os::idl::WireReader& reader)
{
    SixAxisForceTorqueSensors.clear();
    uint32_t _size198;
    yarp::os::idl::WireState _etype201;
    reader.readListBegin(_etype201, _size198);
    SixAxisForceTorqueSensors.resize(_size198);
    for (auto& _elem202 : SixAxisForceTorqueSensors) {
        if (!reader.readNested(_elem202)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) SixAxisForceTorqueSensors field
bool SensorRPCData::nested_write_SixAxisForceTorqueSensors(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(SixAxisForceTorqueSensors.size()))) {
        return false;
    }
    for (const auto& _item203 : SixAxisForceTorqueSensors) {
        if (!writer.writeNested(_item203)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read ContactLoadCellArrays field
bool SensorRPCData::read_ContactLoadCellArrays(yarp::os::idl::WireReader& reader)
{
    ContactLoadCellArrays.clear();
    uint32_t _size204;
    yarp::os::idl::WireState _etype207;
    reader.readListBegin(_etype207, _size204);
    ContactLoadCellArrays.resize(_size204);
    for (auto& _elem208 : ContactLoadCellArrays) {
        if (!reader.readNested(_elem208)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write ContactLoadCellArrays field
bool SensorRPCData::write_ContactLoadCellArrays(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ContactLoadCellArrays.size()))) {
        return false;
    }
    for (const auto& _item209 : ContactLoadCellArrays) {
        if (!writer.writeNested(_item209)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) ContactLoadCellArrays field
bool SensorRPCData::nested_read_ContactLoadCellArrays(yarp::os::idl::WireReader& reader)
{
    ContactLoadCellArrays.clear();
    uint32_t _size210;
    yarp::os::idl::WireState _etype213;
    reader.readListBegin(_etype213, _size210);
    ContactLoadCellArrays.resize(_size210);
    for (auto& _elem214 : ContactLoadCellArrays) {
        if (!reader.readNested(_elem214)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) ContactLoadCellArrays field
bool SensorRPCData::nested_write_ContactLoadCellArrays(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(ContactLoadCellArrays.size()))) {
        return false;
    }
    for (const auto& _item215 : ContactLoadCellArrays) {
        if (!writer.writeNested(_item215)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read EncoderArrays field
bool SensorRPCData::read_EncoderArrays(yarp::os::idl::WireReader& reader)
{
    EncoderArrays.clear();
    uint32_t _size216;
    yarp::os::idl::WireState _etype219;
    reader.readListBegin(_etype219, _size216);
    EncoderArrays.resize(_size216);
    for (auto& _elem220 : EncoderArrays) {
        if (!reader.readNested(_elem220)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write EncoderArrays field
bool SensorRPCData::write_EncoderArrays(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(EncoderArrays.size()))) {
        return false;
    }
    for (const auto& _item221 : EncoderArrays) {
        if (!writer.writeNested(_item221)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) EncoderArrays field
bool SensorRPCData::nested_read_EncoderArrays(yarp::os::idl::WireReader& reader)
{
    EncoderArrays.clear();
    uint32_t _size222;
    yarp::os::idl::WireState _etype225;
    reader.readListBegin(_etype225, _size222);
    EncoderArrays.resize(_size222);
    for (auto& _elem226 : EncoderArrays) {
        if (!reader.readNested(_elem226)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) EncoderArrays field
bool SensorRPCData::nested_write_EncoderArrays(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(EncoderArrays.size()))) {
        return false;
    }
    for (const auto& _item227 : EncoderArrays) {
        if (!writer.writeNested(_item227)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read SkinPatches field
bool SensorRPCData::read_SkinPatches(yarp::os::idl::WireReader& reader)
{
    SkinPatches.clear();
    uint32_t _size228;
    yarp::os::idl::WireState _etype231;
    reader.readListBegin(_etype231, _size228);
    SkinPatches.resize(_size228);
    for (auto& _elem232 : SkinPatches) {
        if (!reader.readNested(_elem232)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write SkinPatches field
bool SensorRPCData::write_SkinPatches(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(SkinPatches.size()))) {
        return false;
    }
    for (const auto& _item233 : SkinPatches) {
        if (!writer.writeNested(_item233)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) SkinPatches field
bool SensorRPCData::nested_read_SkinPatches(yarp::os::idl::WireReader& reader)
{
    SkinPatches.clear();
    uint32_t _size234;
    yarp::os::idl::WireState _etype237;
    reader.readListBegin(_etype237, _size234);
    SkinPatches.resize(_size234);
    for (auto& _elem238 : SkinPatches) {
        if (!reader.readNested(_elem238)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) SkinPatches field
bool SensorRPCData::nested_write_SkinPatches(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(SkinPatches.size()))) {
        return false;
    }
    for (const auto& _item239 : SkinPatches) {
        if (!writer.writeNested(_item239)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}
