/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarpdataplayer_console_IDL.h>

#include <yarp/os/idl/WireTypes.h>

// step helper class declaration
class yarpdataplayer_console_IDL_step_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_step_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    bool m_return_helper{};

    static constexpr const char* s_tag{"step"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::step()"};
    static constexpr const char* s_help{
        "Steps the player once. The player will be stepped\n"
        "until all parts have sent data\n"
        "@return true/false on success/failure"
    };
};

// setFrame helper class declaration
class yarpdataplayer_console_IDL_setFrame_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_setFrame_helper() = default;
    explicit yarpdataplayer_console_IDL_setFrame_helper(const std::int32_t frameNum);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::int32_t m_frameNum;

    bool m_return_helper{};

    static constexpr const char* s_tag{"setFrame"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::setFrame(const std::int32_t frameNum)"};
    static constexpr const char* s_help{
        "Sets the frame number to the user desired frame.\n"
        "@param frameNum specifies the frame number the user\n"
        " would like to skip to\n"
        "@return true/false on success/failure"
    };
};

// getFrame helper class declaration
class yarpdataplayer_console_IDL_getFrame_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getFrame_helper() = default;
    explicit yarpdataplayer_console_IDL_getFrame_helper(const std::string& name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::string m_name;

    std::int32_t m_return_helper{};

    static constexpr const char* s_tag{"getFrame"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"std::int32_t yarpdataplayer_console_IDL::getFrame(const std::string& name)"};
    static constexpr const char* s_help{
        "Gets the frame number the user is requesting\n"
        "@param name specifies the name of the data to modify\n"
        " would like to skip to\n"
        "@return i32 returns the current frame index"
    };
};

// load helper class declaration
class yarpdataplayer_console_IDL_load_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_load_helper() = default;
    explicit yarpdataplayer_console_IDL_load_helper(const std::string& path);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::string m_path;

    bool m_return_helper{};

    static constexpr const char* s_tag{"load"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::load(const std::string& path)"};
    static constexpr const char* s_help{
        "Loads a dataset from a path\n"
        "@return true/false on success/failure"
    };
};

// play helper class declaration
class yarpdataplayer_console_IDL_play_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_play_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    bool m_return_helper{};

    static constexpr const char* s_tag{"play"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::play()"};
    static constexpr const char* s_help{
        "Plays the dataSets\n"
        "@return true/false on success/failure"
    };
};

// pause helper class declaration
class yarpdataplayer_console_IDL_pause_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_pause_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    bool m_return_helper{};

    static constexpr const char* s_tag{"pause"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::pause()"};
    static constexpr const char* s_help{
        "Pauses the dataSets\n"
        "@return true/false on success/failure"
    };
};

// stop helper class declaration
class yarpdataplayer_console_IDL_stop_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_stop_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    bool m_return_helper{};

    static constexpr const char* s_tag{"stop"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::stop()"};
    static constexpr const char* s_help{
        "Stops the dataSets\n"
        "@return true/false on success/failure"
    };
};

// enable helper class declaration
class yarpdataplayer_console_IDL_enable_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_enable_helper() = default;
    explicit yarpdataplayer_console_IDL_enable_helper(const std::string& part);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::string m_part;

    bool m_return_helper{};

    static constexpr const char* s_tag{"enable"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::enable(const std::string& part)"};
    static constexpr const char* s_help{
        "Enables the specified part.\n"
        "@param name specifies the name of the loaded data\n"
        "@return true/false on success/failure"
    };
};

// disable helper class declaration
class yarpdataplayer_console_IDL_disable_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_disable_helper() = default;
    explicit yarpdataplayer_console_IDL_disable_helper(const std::string& part);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::string m_part;

    bool m_return_helper{};

    static constexpr const char* s_tag{"disable"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::disable(const std::string& part)"};
    static constexpr const char* s_help{
        "Disable the specified part.\n"
        "@param name specifies the name of the loaded data\n"
        "@return true/false on success/failure"
    };
};

// getAllParts helper class declaration
class yarpdataplayer_console_IDL_getAllParts_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getAllParts_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::vector<std::string> m_return_helper{};

    static constexpr const char* s_tag{"getAllParts"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"std::vector<std::string> yarpdataplayer_console_IDL::getAllParts()"};
    static constexpr const char* s_help{
        "Gets the names of all parts loaded.\n"
        "@return list of names of the loaded parts."
    };
};

// getPortName helper class declaration
class yarpdataplayer_console_IDL_getPortName_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getPortName_helper() = default;
    explicit yarpdataplayer_console_IDL_getPortName_helper(const std::string& part);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::string m_part;

    std::string m_return_helper{};

    static constexpr const char* s_tag{"getPortName"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"std::string yarpdataplayer_console_IDL::getPortName(const std::string& part)"};
    static constexpr const char* s_help{
        "Gets the name of the port associated to the specified part\n"
        "@param name specifies the name of the data to modify\n"
        "@return port name"
    };
};

// setPortName helper class declaration
class yarpdataplayer_console_IDL_setPortName_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_setPortName_helper() = default;
    yarpdataplayer_console_IDL_setPortName_helper(const std::string& part, const std::string& new_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::string m_part;
    std::string m_new_name;

    bool m_return_helper{};

    static constexpr const char* s_tag{"setPortName"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::setPortName(const std::string& part, const std::string& new_name)"};
    static constexpr const char* s_help{
        "Sets the name of the port associated to the specified part\n"
        "@param part specifies the name of the data to modify\n"
        "@param new_name specifies the new name to assign to the port\n"
        "@return true/false on success/failure"
    };
};

// setSpeed helper class declaration
class yarpdataplayer_console_IDL_setSpeed_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_setSpeed_helper() = default;
    explicit yarpdataplayer_console_IDL_setSpeed_helper(const double speed);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    double m_speed;

    bool m_return_helper{};

    static constexpr const char* s_tag{"setSpeed"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::setSpeed(const double speed)"};
    static constexpr const char* s_help{
        "Sets the player speed\n"
        "@param speed specifies\n"
        "@return true/false on success/failure"
    };
};

// getSpeed helper class declaration
class yarpdataplayer_console_IDL_getSpeed_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getSpeed_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    double m_return_helper{};

    static constexpr const char* s_tag{"getSpeed"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double yarpdataplayer_console_IDL::getSpeed()"};
    static constexpr const char* s_help{
        "Gets the player speed\n"
        "@return value of the player speed"
    };
};

// repeat helper class declaration
class yarpdataplayer_console_IDL_repeat_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_repeat_helper() = default;
    explicit yarpdataplayer_console_IDL_repeat_helper(const bool val);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    bool m_val;

    bool m_return_helper{};

    static constexpr const char* s_tag{"repeat"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::repeat(const bool val)"};
    static constexpr const char* s_help{
        "Sets repeat mode\n"
        "@param val if true repeat mode is active.\n"
        "@return true/false on success/failure"
    };
};

// setStrict helper class declaration
class yarpdataplayer_console_IDL_setStrict_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_setStrict_helper() = default;
    explicit yarpdataplayer_console_IDL_setStrict_helper(const bool val);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    bool m_val;

    bool m_return_helper{};

    static constexpr const char* s_tag{"setStrict"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::setStrict(const bool val)"};
    static constexpr const char* s_help{
        "Sets strict mode\n"
        "@param val if true strict mode is active.\n"
        "@return true/false on success/failure"
    };
};

// forward helper class declaration
class yarpdataplayer_console_IDL_forward_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_forward_helper() = default;
    explicit yarpdataplayer_console_IDL_forward_helper(const std::int32_t steps);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::int32_t m_steps;

    bool m_return_helper{};

    static constexpr const char* s_tag{"forward"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::forward(const std::int32_t steps)"};
    static constexpr const char* s_help{
        "Steps forward\n"
        "@param steps number of steps to go forward (default=5).\n"
        "@return true/false on success/failure"
    };
};

// backward helper class declaration
class yarpdataplayer_console_IDL_backward_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_backward_helper() = default;
    explicit yarpdataplayer_console_IDL_backward_helper(const std::int32_t steps);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::int32_t m_steps;

    bool m_return_helper{};

    static constexpr const char* s_tag{"backward"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::backward(const std::int32_t steps)"};
    static constexpr const char* s_help{
        "Steps backward\n"
        "@param steps number of steps to go backward (default=5).\n"
        "@return true/false on success/failure"
    };
};

// getProgress helper class declaration
class yarpdataplayer_console_IDL_getProgress_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getProgress_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    double m_return_helper{};

    static constexpr const char* s_tag{"getProgress"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double yarpdataplayer_console_IDL::getProgress()"};
    static constexpr const char* s_help{
        "Get the progress of the parts\n"
        "@return the progress of the parts"
    };
};

// getStatus helper class declaration
class yarpdataplayer_console_IDL_getStatus_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getStatus_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    std::string m_return_helper{};

    static constexpr const char* s_tag{"getStatus"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"std::string yarpdataplayer_console_IDL::getStatus()"};
    static constexpr const char* s_help{
        "Get the status of playing\n"
        "@return the status (playing, paused, stopped)"
    };
};

// resume helper class declaration
class yarpdataplayer_console_IDL_resume_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_resume_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    bool m_return_helper{};

    static constexpr const char* s_tag{"resume"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::resume()"};
    static constexpr const char* s_help{
        "Resume dataset from where it was paused\n"
        "@return true/false on success/failure"
    };
};

// quit helper class declaration
class yarpdataplayer_console_IDL_quit_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_quit_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool writeCmd(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdLen(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdTag(yarp::os::idl::WireWriter& writer) const;
    bool writeCmdArgs(yarp::os::idl::WireWriter& writer) const;

    bool readCmd(yarp::os::idl::WireReader& reader);
    bool readCmdLen(yarp::os::idl::WireReader& reader);
    bool readCmdTag(yarp::os::idl::WireReader& reader);
    bool readCmdArgs(yarp::os::idl::WireReader& reader);

    bool writeReply(yarp::os::idl::WireWriter& writer) const;

    bool readReply(yarp::os::idl::WireReader& reader);

    void call(yarpdataplayer_console_IDL* ptr);

    bool m_return_helper{};

    static constexpr const char* s_tag{"quit"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::quit()"};
    static constexpr const char* s_help{
        "Quit the module.\n"
        "@return true/false on success/failure"
    };
};

// step helper class implementation
bool yarpdataplayer_console_IDL_step_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_step_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_step_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_step_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_step_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_step_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool yarpdataplayer_console_IDL_step_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_step_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_step_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_step_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_step_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_step_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_step_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->step();
}

// setFrame helper class implementation
yarpdataplayer_console_IDL_setFrame_helper::yarpdataplayer_console_IDL_setFrame_helper(const std::int32_t frameNum) :
        m_frameNum{frameNum},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_setFrame_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_setFrame_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_setFrame_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setFrame_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setFrame_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setFrame_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeI32(m_frameNum)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setFrame_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setFrame_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setFrame_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setFrame_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(m_frameNum)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setFrame_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_setFrame_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_setFrame_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->setFrame(m_frameNum);
}

// getFrame helper class implementation
yarpdataplayer_console_IDL_getFrame_helper::yarpdataplayer_console_IDL_getFrame_helper(const std::string& name) :
        m_name{name},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_getFrame_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_getFrame_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_getFrame_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getFrame_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getFrame_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getFrame_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeString(m_name)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getFrame_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getFrame_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getFrame_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getFrame_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(m_name)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getFrame_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeI32(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_getFrame_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_getFrame_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->getFrame(m_name);
}

// load helper class implementation
yarpdataplayer_console_IDL_load_helper::yarpdataplayer_console_IDL_load_helper(const std::string& path) :
        m_path{path},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_load_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_load_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_load_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_load_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_load_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_load_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeString(m_path)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_load_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_load_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_load_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_load_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(m_path)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_load_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_load_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_load_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->load(m_path);
}

// play helper class implementation
bool yarpdataplayer_console_IDL_play_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_play_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_play_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_play_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_play_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_play_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool yarpdataplayer_console_IDL_play_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_play_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_play_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_play_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_play_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_play_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_play_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->play();
}

// pause helper class implementation
bool yarpdataplayer_console_IDL_pause_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_pause_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_pause_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_pause_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_pause_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_pause_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool yarpdataplayer_console_IDL_pause_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_pause_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_pause_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_pause_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_pause_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_pause_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_pause_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->pause();
}

// stop helper class implementation
bool yarpdataplayer_console_IDL_stop_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_stop_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_stop_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_stop_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_stop_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_stop_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool yarpdataplayer_console_IDL_stop_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_stop_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_stop_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_stop_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_stop_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_stop_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_stop_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->stop();
}

// enable helper class implementation
yarpdataplayer_console_IDL_enable_helper::yarpdataplayer_console_IDL_enable_helper(const std::string& part) :
        m_part{part},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_enable_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_enable_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_enable_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_enable_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_enable_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_enable_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeString(m_part)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_enable_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_enable_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_enable_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_enable_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(m_part)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_enable_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_enable_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_enable_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->enable(m_part);
}

// disable helper class implementation
yarpdataplayer_console_IDL_disable_helper::yarpdataplayer_console_IDL_disable_helper(const std::string& part) :
        m_part{part},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_disable_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_disable_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_disable_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_disable_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_disable_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_disable_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeString(m_part)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_disable_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_disable_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_disable_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_disable_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(m_part)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_disable_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_disable_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_disable_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->disable(m_part);
}

// getAllParts helper class implementation
bool yarpdataplayer_console_IDL_getAllParts_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_getAllParts_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_getAllParts_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getAllParts_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getAllParts_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getAllParts_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool yarpdataplayer_console_IDL_getAllParts_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getAllParts_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getAllParts_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getAllParts_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getAllParts_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeListBegin(BOTTLE_TAG_STRING, static_cast<uint32_t>(m_return_helper.size()))) {
            return false;
        }
        for (const auto& _item0 : m_return_helper) {
            if (!writer.writeString(_item0)) {
                return false;
            }
        }
        if (!writer.writeListEnd()) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_getAllParts_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    m_return_helper.clear();
    uint32_t _size1;
    yarp::os::idl::WireState _etype4;
    reader.readListBegin(_etype4, _size1);
    m_return_helper.resize(_size1);
    for (size_t _i5 = 0; _i5 < _size1; ++_i5) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readString(m_return_helper[_i5])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

void yarpdataplayer_console_IDL_getAllParts_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->getAllParts();
}

// getPortName helper class implementation
yarpdataplayer_console_IDL_getPortName_helper::yarpdataplayer_console_IDL_getPortName_helper(const std::string& part) :
        m_part{part},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_getPortName_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_getPortName_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_getPortName_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getPortName_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getPortName_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getPortName_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeString(m_part)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getPortName_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getPortName_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getPortName_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getPortName_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(m_part)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getPortName_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeString(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_getPortName_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_getPortName_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->getPortName(m_part);
}

// setPortName helper class implementation
yarpdataplayer_console_IDL_setPortName_helper::yarpdataplayer_console_IDL_setPortName_helper(const std::string& part, const std::string& new_name) :
        m_part{part},
        m_new_name{new_name},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_setPortName_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_setPortName_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_setPortName_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setPortName_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setPortName_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setPortName_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeString(m_part)) {
        return false;
    }
    if (!writer.writeString(m_new_name)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setPortName_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setPortName_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setPortName_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setPortName_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(m_part)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(m_new_name)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setPortName_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_setPortName_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_setPortName_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->setPortName(m_part, m_new_name);
}

// setSpeed helper class implementation
yarpdataplayer_console_IDL_setSpeed_helper::yarpdataplayer_console_IDL_setSpeed_helper(const double speed) :
        m_speed{speed},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_setSpeed_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_setSpeed_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_setSpeed_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setSpeed_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setSpeed_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setSpeed_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeFloat64(m_speed)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setSpeed_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setSpeed_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setSpeed_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setSpeed_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(m_speed)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setSpeed_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_setSpeed_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_setSpeed_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->setSpeed(m_speed);
}

// getSpeed helper class implementation
bool yarpdataplayer_console_IDL_getSpeed_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_getSpeed_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_getSpeed_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getSpeed_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getSpeed_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getSpeed_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool yarpdataplayer_console_IDL_getSpeed_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getSpeed_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getSpeed_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getSpeed_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getSpeed_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_getSpeed_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_getSpeed_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->getSpeed();
}

// repeat helper class implementation
yarpdataplayer_console_IDL_repeat_helper::yarpdataplayer_console_IDL_repeat_helper(const bool val) :
        m_val{val},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_repeat_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_repeat_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_repeat_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_repeat_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_repeat_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_repeat_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeBool(m_val)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_repeat_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_repeat_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_repeat_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_repeat_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(m_val)) {
        m_val = false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_repeat_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_repeat_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_repeat_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->repeat(m_val);
}

// setStrict helper class implementation
yarpdataplayer_console_IDL_setStrict_helper::yarpdataplayer_console_IDL_setStrict_helper(const bool val) :
        m_val{val},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_setStrict_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_setStrict_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_setStrict_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setStrict_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setStrict_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setStrict_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeBool(m_val)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setStrict_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setStrict_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setStrict_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setStrict_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(m_val)) {
        m_val = false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_setStrict_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_setStrict_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_setStrict_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->setStrict(m_val);
}

// forward helper class implementation
yarpdataplayer_console_IDL_forward_helper::yarpdataplayer_console_IDL_forward_helper(const std::int32_t steps) :
        m_steps{steps},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_forward_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_forward_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_forward_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_forward_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_forward_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_forward_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeI32(m_steps)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_forward_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_forward_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_forward_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_forward_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.readI32(m_steps)) {
        m_steps = 5;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_forward_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_forward_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_forward_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->forward(m_steps);
}

// backward helper class implementation
yarpdataplayer_console_IDL_backward_helper::yarpdataplayer_console_IDL_backward_helper(const std::int32_t steps) :
        m_steps{steps},
        m_return_helper{}
{
}

bool yarpdataplayer_console_IDL_backward_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_backward_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_backward_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_backward_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_backward_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_backward_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    if (!writer.writeI32(m_steps)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_backward_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_backward_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_backward_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_backward_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.readI32(m_steps)) {
        m_steps = 5;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_backward_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_backward_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_backward_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->backward(m_steps);
}

// getProgress helper class implementation
bool yarpdataplayer_console_IDL_getProgress_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_getProgress_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_getProgress_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getProgress_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getProgress_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getProgress_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool yarpdataplayer_console_IDL_getProgress_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getProgress_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getProgress_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getProgress_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getProgress_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_getProgress_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_getProgress_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->getProgress();
}

// getStatus helper class implementation
bool yarpdataplayer_console_IDL_getStatus_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_getStatus_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_getStatus_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getStatus_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getStatus_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getStatus_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool yarpdataplayer_console_IDL_getStatus_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getStatus_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getStatus_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getStatus_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_getStatus_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeString(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_getStatus_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_getStatus_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->getStatus();
}

// resume helper class implementation
bool yarpdataplayer_console_IDL_resume_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_resume_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_resume_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_resume_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_resume_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_resume_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool yarpdataplayer_console_IDL_resume_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_resume_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_resume_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_resume_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_resume_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_resume_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_resume_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->resume();
}

// quit helper class implementation
bool yarpdataplayer_console_IDL_quit_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return writeCmd(writer);
}

bool yarpdataplayer_console_IDL_quit_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return readReply(reader);
}

bool yarpdataplayer_console_IDL_quit_helper::writeCmd(yarp::os::idl::WireWriter& writer) const
{
    if (!writeCmdLen(writer)) {
        return false;
    }
    if (!writeCmdTag(writer)) {
        return false;
    }
    if (!writeCmdArgs(writer)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_quit_helper::writeCmdLen(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_quit_helper::writeCmdTag(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_quit_helper::writeCmdArgs(yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool yarpdataplayer_console_IDL_quit_helper::readCmd(yarp::os::idl::WireReader& reader)
{
    if (!readCmdLen(reader)) {
        return false;
    }
    if (!readCmdTag(reader)) {
        return false;
    }
    if (!readCmdArgs(reader)) {
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_quit_helper::readCmdLen(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_quit_helper::readCmdTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag();
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_quit_helper::readCmdArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool yarpdataplayer_console_IDL_quit_helper::writeReply(yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(m_return_helper)) {
            return false;
        }
    }
    return true;
}

bool yarpdataplayer_console_IDL_quit_helper::readReply(yarp::os::idl::WireReader& reader [[maybe_unused]])
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void yarpdataplayer_console_IDL_quit_helper::call(yarpdataplayer_console_IDL* ptr)
{
    m_return_helper = ptr->quit();
}

// Constructor
yarpdataplayer_console_IDL::yarpdataplayer_console_IDL()
{
    yarp().setOwner(*this);
}

bool yarpdataplayer_console_IDL::step()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_step_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_step_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::setFrame(const std::int32_t frameNum)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_setFrame_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_setFrame_helper helper{frameNum};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

std::int32_t yarpdataplayer_console_IDL::getFrame(const std::string& name)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getFrame_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getFrame_helper helper{name};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : std::int32_t{};
}

bool yarpdataplayer_console_IDL::load(const std::string& path)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_load_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_load_helper helper{path};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::play()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_play_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_play_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::pause()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_pause_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_pause_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::stop()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_stop_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_stop_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::enable(const std::string& part)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_enable_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_enable_helper helper{part};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::disable(const std::string& part)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_disable_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_disable_helper helper{part};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

std::vector<std::string> yarpdataplayer_console_IDL::getAllParts()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getAllParts_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getAllParts_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : std::vector<std::string>{};
}

std::string yarpdataplayer_console_IDL::getPortName(const std::string& part)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getPortName_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getPortName_helper helper{part};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : std::string{};
}

bool yarpdataplayer_console_IDL::setPortName(const std::string& part, const std::string& new_name)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_setPortName_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_setPortName_helper helper{part, new_name};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::setSpeed(const double speed)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_setSpeed_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_setSpeed_helper helper{speed};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

double yarpdataplayer_console_IDL::getSpeed()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getSpeed_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getSpeed_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : double{};
}

bool yarpdataplayer_console_IDL::repeat(const bool val)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_repeat_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_repeat_helper helper{val};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::setStrict(const bool val)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_setStrict_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_setStrict_helper helper{val};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::forward(const std::int32_t steps)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_forward_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_forward_helper helper{steps};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::backward(const std::int32_t steps)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_backward_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_backward_helper helper{steps};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

double yarpdataplayer_console_IDL::getProgress()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getProgress_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getProgress_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : double{};
}

std::string yarpdataplayer_console_IDL::getStatus()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getStatus_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getStatus_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : std::string{};
}

bool yarpdataplayer_console_IDL::resume()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_resume_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_resume_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool yarpdataplayer_console_IDL::quit()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_quit_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_quit_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

// help method
std::vector<std::string> yarpdataplayer_console_IDL::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(yarpdataplayer_console_IDL_step_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_setFrame_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getFrame_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_load_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_play_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_pause_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_stop_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_enable_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_disable_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getAllParts_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getPortName_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_setPortName_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_setSpeed_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getSpeed_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_repeat_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_setStrict_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_forward_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_backward_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getProgress_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getStatus_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_resume_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_quit_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == yarpdataplayer_console_IDL_step_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_step_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_step_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_setFrame_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_setFrame_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_setFrame_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getFrame_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getFrame_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getFrame_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_load_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_load_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_load_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_play_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_play_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_play_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_pause_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_pause_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_pause_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_stop_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_stop_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_stop_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_enable_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_enable_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_enable_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_disable_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_disable_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_disable_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getAllParts_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getAllParts_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getAllParts_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getPortName_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getPortName_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getPortName_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_setPortName_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_setPortName_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_setPortName_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_setSpeed_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_setSpeed_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_setSpeed_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getSpeed_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getSpeed_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getSpeed_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_repeat_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_repeat_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_repeat_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_setStrict_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_setStrict_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_setStrict_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_forward_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_forward_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_forward_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_backward_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_backward_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_backward_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getProgress_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getProgress_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getProgress_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getStatus_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getStatus_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getStatus_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_resume_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_resume_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_resume_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_quit_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_quit_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_quit_helper::s_help);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool yarpdataplayer_console_IDL::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == yarpdataplayer_console_IDL_step_helper::s_tag) {
            yarpdataplayer_console_IDL_step_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_setFrame_helper::s_tag) {
            yarpdataplayer_console_IDL_setFrame_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getFrame_helper::s_tag) {
            yarpdataplayer_console_IDL_getFrame_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_load_helper::s_tag) {
            yarpdataplayer_console_IDL_load_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_play_helper::s_tag) {
            yarpdataplayer_console_IDL_play_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_pause_helper::s_tag) {
            yarpdataplayer_console_IDL_pause_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_stop_helper::s_tag) {
            yarpdataplayer_console_IDL_stop_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_enable_helper::s_tag) {
            yarpdataplayer_console_IDL_enable_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_disable_helper::s_tag) {
            yarpdataplayer_console_IDL_disable_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getAllParts_helper::s_tag) {
            yarpdataplayer_console_IDL_getAllParts_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getPortName_helper::s_tag) {
            yarpdataplayer_console_IDL_getPortName_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_setPortName_helper::s_tag) {
            yarpdataplayer_console_IDL_setPortName_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_setSpeed_helper::s_tag) {
            yarpdataplayer_console_IDL_setSpeed_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getSpeed_helper::s_tag) {
            yarpdataplayer_console_IDL_getSpeed_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_repeat_helper::s_tag) {
            yarpdataplayer_console_IDL_repeat_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_setStrict_helper::s_tag) {
            yarpdataplayer_console_IDL_setStrict_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_forward_helper::s_tag) {
            yarpdataplayer_console_IDL_forward_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_backward_helper::s_tag) {
            yarpdataplayer_console_IDL_backward_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getProgress_helper::s_tag) {
            yarpdataplayer_console_IDL_getProgress_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getStatus_helper::s_tag) {
            yarpdataplayer_console_IDL_getStatus_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_resume_helper::s_tag) {
            yarpdataplayer_console_IDL_resume_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_quit_helper::s_tag) {
            yarpdataplayer_console_IDL_quit_helper helper;
            if (!helper.readCmdArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.writeReply(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
