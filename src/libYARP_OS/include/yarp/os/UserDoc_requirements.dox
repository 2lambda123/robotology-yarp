/**
 *
 * @page requirements General Requirements

 * YARP is tested on Windows (2000/XP), Linux (Debian/SuSE), and MacOSX
 * (Tiger). It is based on the open-source ACE (ADAPTIVE
 * Communication Environment) library, which is portable across a very
 * broad range of environments, and YARP should inherit that
 * portability. YARP is written almost entirely in C++.

 * For real-time operation, network overhead has to be minimized, so
 * YARP is designed to operate on an isolated network or behind a
 * firewall. If you expose machines running YARP to the internet,
 * expect your robot to one day be commanded to make a crude gesture
 * at your funders by a script kiddie in New Zealand (or, if you are
 * in New Zealand, New York).

 * For interfacing with hardware, we are at the mercy of which
 * operating systems particular companies choose to support - few are
 * enlightened enough to provide source. The libYARP_dev library is
 * structured to interface easily with vendor-supplied code, but to
 * shield the rest of your system from that code so that future
 * hardware replacements are possible. Check the requirements imposed
 * by your current hardware; YARP will not reduce these, only make
 * future changes easier.

 * With the same spirit the libYARP_robot tries to provide a common
 * interface to different robotic platforms. Still the idea is that of
 * shielding higher level code from the nitty-gritty details of the
 * robot hardware and configuration. Porting to a new platform is not
 * guaranteed to be anything trivial but for the reuse of higher level
 * code. The amount of recycling clearly depends on the differences
 * among control cards, frame grabbers, etc. Unfortunately, this
 * doesn't shield you from knowing the platform you're going to work
 * on, but we bet you need to know it anyway.

 * YARP has consequently three levels of configuration: operating
 * system, hardware, and robot level. The first level of configuration
 * should concern you only if you're planning to compile YARP on a new
 * operating system. 

 * The second level is the hardware. A new addition on an existing
 * platform or a new platform altogether might require preparing a few
 * YARP device drivers. These are to all effects C++ classes that
 * support the methods for accessing the hardware which is normally
 * implemented through function calls to whatever provided by the
 * hardware vendor. This comes typically in the form of either a DLL
 * or a static library.

 * Finally, you can prepare configuration files for an entirely
 * new robotic platform.

 *
 */
