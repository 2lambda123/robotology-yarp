// -*- mode:C++; tab-width:4; c-basic-offset:4; indent-tabs-mode:nil -*-
#ifndef _YARP2_USERDOC_
#define _YARP2_USERDOC_

/**
 * @mainpage Welcome to YARP
 *
 * @section welcome_disclaimer Ominous but Enigmatic Warning
 *
 * \code
 Through Me Pass into the Painful City,
 Through Me Pass into Eternal Grief,
 Through Me Pass among the Lost People.
 Justice Moved My Master-Builder:
 Heavenly Power First Fashioned Me
 With Highest Wisdom and with Primal Love.
 Before Me Nothing Was Created That
 Was Not Eternal, and I Last Eternally.
 All Hope Abandon, You Who Enter Here.
 * \endcode
 *
 * @section welcome_topics Topics
 *
 * So \subpage what_is_yarp "what exactly is YARP"?
 *
 * Need help installing and compiling YARP?  See @subpage install.
 *
 * Want to start using the library?  Start with @subpage yarp_os.
 *
 * Do you want to understand how to add a device driver to libYARP_dev? Have 
 * a look at @subpage dev-how-to.
 
 * If you are interested in network interoperability, your can read some \subpage terms "specification of YARP terms and protocols".

 */

/**
 * @page what_is_yarp What is YARP?
 *
 * YARP is written by and for researchers in robotics, particularly
 * humanoid robotics, who find themselves with a complicated pile of
 * hardware to control with an equally complicated pile of
 * software. At the time of writing (2006), running decent visual,
 * auditory, and tactile perception while performing elaborate motor
 * control in real-time requires a lot of computation. The easiest and
 * most scalable way to do this right now is to have a cluster of
 * computers. Every year what one machine can do grows, but so do our
 * demands. YARP is a set of tools we have found useful for meeting
 * our computational needs for controlling various humanoid robots.
 *
 * The components of YARP can be broken down into:

 * \li \link yarp_os libYARP_OS \endlink - interfacing with the operating system(s) to support
 * easy streaming of data across many threads across many
 * machines. YARP is written to be OS neutral, and explicitly
 * supports Linux, Microsoft Windows, Mac OSX and (in some versions) the
 * QNX realtime operating system.

 * \li libYARP_sig - performing common signal processing tasks (visual,
 * auditory) in an open manner easily interfaced with other
 * commonly used libraries.

 * \li libYARP_dev - interfacing with common devices used in robotics:
 * framegrabbers, digital cameras, motor control boards, etc.

 * These components are maintained separately. The core component
 * is libYARP_OS, which must be available before the other
 * components can be used. This manual describes how to install and
 * use that component first, then the others.

 * YARP has some @subpage requirements
 *
 *
 */






/**
 * @page yarp_os The YARP OS library
 *
 * @section intro_sec Introduction
 *
 * Welcome to the YARP OS library.  This library interfaces
 * with your operating system and provides some basic services.
 * We give you
 * \link yarp::os::Thread Thread\endlink, 
 * \link yarp::os::Semaphore Semaphore\endlink, and 
 * \link yarp::os::Time Time\endlink
 * services just in case
 * you don't have them, but our main goal is to give you easy network
 * communication using the YARP 
 * \link yarp::os::Port Port\endlink
 * Network.
 * 
 * To install and test yarp,
 * see our website, http://yarp0.sourceforge.net,
 * where you can explore the classes
 * provided in the YARP OS library.  
 *
 * @section what_is_a_port What is a Port?
 *
 * A \link yarp::os::Port Port\endlink is an object that can read and
 * write values to peer objects spread throughout a network of
 * computers.  You can create them in your program, and then add and
 * remove connections either from that program, from the command line,
 * or from another program.
 * Ports are specialized for streaming communication, such as camera
 * images or motor commands.  You can switch network protocols for any
 * or all your connections without changing a line of code.
 *
 * @section example_sec A simple code example
 *
 * Here we work through an example of using YARP communication.
 * First, here are two programs, a sender and receiver, 
 * \ref simple_sender.cpp and \ref simple_receiver.cpp
 *
 * Here's simple_sender.cpp:
 *
 * \include example/os/simple_sender.cpp
 *
 * Here's simple_receiver.cpp:
 *
 * \include example/os/simple_receiver.cpp
 *
 * Make sure you have a YARP name server running, then run the
 * first program, then the second.  The sender will send a message
 * to the receiver.
 *
 * @subsection example_compiling Compiling the examples
 *
 * To compile these programs you need two libraries: yarp and ace.
 * These instructions assume you have installed them - if not, see
 * their websites for instructions.  The source of these programs
 * and a makefile are in the directory src/libYARP_OS2/examples
 *
 * If you're on a UNIX machine, you can compile with:
 * \code
 g++ simple_receiver.cpp -o simple_receiver -lACE -lYARP_OS
 g++ simple_sender.cpp -o simple_sender -lACE -lYARP_OS
 * \endcode
 *
 * On windows, you'll need to set up projects and set up include
 * paths and libraries appropriately.
 *
 * @subsection example_running Running the examples
 *
 * On UNIX, on four separate consoles, do:
 * \code
 yarp server
 ./simple_sender
 ./simple_receiver
 yarp connect /out /in
 * \endcode
 *
 * (You may have to give a path to wherever yarp is compiled if it is
 * not in your path). The process on windows in similar.
 *
 */


#endif
