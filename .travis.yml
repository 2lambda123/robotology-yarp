os:
  - linux

language:
  - cpp

compiler:
  - gcc
  - clang

env:
  - TRAVIS_BUILD_TYPE=Profile TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_WITH_ACE=true TRAVIS_WITH_SWIG=false TRAVIS_WITH_RUNTIME=true TRAVIS_WITH_ROS=false
  - TRAVIS_BUILD_TYPE=Profile TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_WITH_ACE=false TRAVIS_WITH_SWIG=false TRAVIS_WITH_RUNTIME=false TRAVIS_WITH_ROS=false
  - TRAVIS_BUILD_TYPE=Profile TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_WITH_ACE=true TRAVIS_WITH_SWIG=true TRAVIS_WITH_RUNTIME=false TRAVIS_WITH_ROS=false
  - TRAVIS_BUILD_TYPE=Profile TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_WITH_ACE=true TRAVIS_WITH_SWIG=false TRAVIS_WITH_RUNTIME=false TRAVIS_WITH_ROS=true

matrix:
  exclude:
    - compiler: gcc
      env: TRAVIS_BUILD_TYPE=Profile TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_WITH_ACE=true TRAVIS_WITH_SWIG=true TRAVIS_WITH_RUNTIME=false TRAVIS_WITH_ROS=false
    - compiler: clang
      env: TRAVIS_BUILD_TYPE=Profile TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_WITH_ACE=true TRAVIS_WITH_SWIG=false TRAVIS_WITH_RUNTIME=false TRAVIS_WITH_ROS=true

notifications:
  irc:
    channels:
      - "chat.freenode.net#yarpers"
    template:
      - "%{repository}/%{branch} (%{commit} - %{author}): %{build_url}: %{message}"
    use_notice: true
    skip_join: true

before_install:
  - sudo add-apt-repository --yes ppa:kalakris/cmake
  - sudo apt-get update -qq
  - if [ "k$TRAVIS_WITH_SWIG" = "ktrue" ]; then wget https://github.com/paulfitz/swigs/releases/download/v0.0.4/swigs.zip; fi
  - if [ "k$TRAVIS_WITH_SWIG" = "ktrue" ]; then unzip -q swigs.zip; mkdir -p cache; mv swigs cache/swig; fi

install:
  - sudo apt-get install cmake
  - if [ "k$TRAVIS_WITH_ACE" = "ktrue" ]; then sudo apt-get install libace-dev; fi
  - if [ "k$TRAVIS_WITH_SWIG" = "ktrue" ]; then sudo apt-get install liblua5.1-0-dev lua5.1 tcl-dev tk-dev mono-gmcs; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then export ROS_CI_DESKTOP=`lsb_release -cs`; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then export ROS_CI_VERSION=groovy; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then export ROS_CI_PREFIX=ros-${ROS_CI_VERSION}-; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then export ROS_HOSTNAME=localhost; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then export ROS_MASTER_URI=http://localhost:11311; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then export ROBOT=sim; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then echo "deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main" | sudo tee /etc/apt/sources.list.d/ros-latest.list; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then wget http://packages.ros.org/ros.key -O - | sudo apt-key add -; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then sudo apt-get -y update; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then sudo apt-get -y install ${ROS_CI_PREFIX}desktop-full; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then sudo rosdep init && rosdep update; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then source /opt/ros/${ROS_CI_VERSION}/setup.bash; fi
  # see http://gronlier.fr/blog/2015/01/adding-code-coverage-to-your-c-project/
  - if [ "$CXX" = "g++" ]; then wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then tar xf lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then sudo make -C lcov-1.11/ install; fi
  - if [ "$CXX" = "g++" ]; then gem install coveralls-lcov; fi

before_script:
  - cmake --version
  - mkdir -p build
  - cd build
  - export YARP_CMAKE_OPTIONS="-DTEST_yarpidl_rosmsg=TRUE -DTEST_yarpidl_thrift=TRUE -DCREATE_OPTIONAL_CARRIERS=TRUE -DENABLE_yarpcar_tcpros_carrier=TRUE -DENABLE_yarpcar_rossrv_carrier=TRUE -DENABLE_yarpcar_xmlrpc_carrier=TRUE"
  - if [ "k$TRAVIS_WITH_ACE" = "kfalse" ]; then export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DSKIP_ACE=TRUE -DYARP_TEST_HEAP=TRUE"; fi
  - cmake -G"${TRAVIS_CMAKE_GENERATOR}" -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} ${YARP_CMAKE_OPTIONS} ..
  - if [ "$CXX" = "g++" ]; then lcov --directory . --zerocounters; fi
  - cd ..

script:
  - cd build
  - cmake --build . --config ${TRAVIS_BUILD_TYPE}
  - ctest -VV --build . --config ${TRAVIS_BUILD_TYPE}
  - if [ "k$TRAVIS_WITH_RUNTIME" = "ktrue" ]; then ../scripts/admin/check-runtime.sh; fi
  - if [ "k$TRAVIS_WITH_RUNTIME" = "ktrue" ]; then ../tests/integration/check-http.sh; fi
  - if [ "k$TRAVIS_WITH_RUNTIME" = "ktrue" ]; then ../tests/integration/check-rpc.sh; fi
  - if [ "k$TRAVIS_WITH_ROS" = "ktrue" ]; then YARP_DIR=$PWD/build YARP_DATA_DIRS=build/share/yarp ./tests/integration/ros/index.sh all; fi
  - cd ..
  - if [ "k$TRAVIS_WITH_SWIG" = "ktrue" ]; then build/bin/yarp conf 0 0 local; fi
  - if [ "k$TRAVIS_WITH_SWIG" = "ktrue" ]; then YARP_DIR=$PWD/build SWIG_VERSIONS="1.3.40 2.0.12 3.0.2" ./scripts/admin/check-bindings.sh PYTHON JAVA LUA RUBY CSHARP PERL TCL; fi

after_success:
  - cd build
  # capture coverage info
  - if [ "$CXX" = "g++" ]; then lcov --directory . --capture --output-file coverage.info; fi
  # filter out system and test code
  - if [ "$CXX" = "g++" ]; then lcov --remove coverage.info '/usr/*' 'tests/*' 'example/*' 'extern/*' 'idls/*' '*/harness/*' 'yarp/build/*' --output-file coverage.info; fi
  # debug before upload
  - if [ "$CXX" = "g++" ]; then lcov --list coverage.info; fi
  # uploads to coveralls
  - if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 coverage.info; fi
  - cd ..
